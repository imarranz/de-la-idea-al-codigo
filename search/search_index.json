{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"De la Idea al C\u00f3digo: Gu\u00eda para J\u00f3venes Programadores # Introducci\u00f3n # \u00a1Bienvenidos a \"De la idea al c\u00f3digo: gu\u00eda para j\u00f3venes programadores\"! Este manual naci\u00f3 del deseo de ense\u00f1ar a mis propios hijos a programar, y ha sido un proyecto que hemos desarrollado juntos, paso a paso, en un emocionante viaje de aprendizaje. Programar no solo les ha permitido crear sus propios juegos y aplicaciones, sino que tambi\u00e9n ha sido una excelente manera de desarrollar su capacidad para resolver problemas y pensar de manera l\u00f3gica. En este libro, exploraremos las bases de la programaci\u00f3n utilizando Python, un lenguaje muy potente y f\u00e1cil de aprender, que hemos encontrado ideal para introducir a los m\u00e1s j\u00f3venes en este mundo. A medida que avances, te enfrentar\u00e1s a desaf\u00edos m\u00e1s complejos, pero no te preocupes, \u00a1estaremos contigo en cada paso del camino, tal como lo hemos estado con nuestros hijos! Cada cap\u00edtulo te ense\u00f1ar\u00e1 nuevos conceptos y habilidades, desde los fundamentos b\u00e1sicos hasta la creaci\u00f3n de proyectos m\u00e1s creativos y avanzados. Aprender\u00e1s c\u00f3mo las computadoras pueden realizar c\u00e1lculos, tomar decisiones y realizar tareas repetitivas. Pero lo m\u00e1s importante, te divertir\u00e1s mientras desarrollas tus propias creaciones, tal como lo hicimos nosotros. Este proyecto es un esfuerzo continuo y vivo, que ponemos a disposici\u00f3n de la comunidad con la esperanza de que sea \u00fatil para otros padres, educadores y j\u00f3venes programadores. Si encuentras valor en \u00e9l, si\u00e9ntete libre de compartirlo, usarlo y contribuir a su crecimiento. \u00a1Estamos emocionados de ver c\u00f3mo m\u00e1s ni\u00f1os pueden aprender y disfrutar de la programaci\u00f3n gracias a esta gu\u00eda! Estructura del Manual # Este manual est\u00e1 dividido en varios cap\u00edtulos, cada uno dise\u00f1ado para ense\u00f1arte algo nuevo y emocionante sobre la programaci\u00f3n: Cap\u00edtulo 1: Conceptos B\u00e1sicos de Programaci\u00f3n Empezaremos con lo m\u00e1s esencial: c\u00f3mo hacer que la computadora haga lo que t\u00fa quieras. Aprender\u00e1s a escribir tus primeros programas, como mostrar mensajes en la pantalla y realizar c\u00e1lculos sencillos. Cap\u00edtulo 2: Programaci\u00f3n Intermedia En este cap\u00edtulo, exploraremos c\u00f3mo las computadoras pueden tomar decisiones y repetir tareas. Aprender\u00e1s a crear tablas de multiplicar, simular juegos de dados, y manipular cadenas de texto. Cap\u00edtulo 3: Programaci\u00f3n Avanzada Aqu\u00ed es donde las cosas se ponen interesantes. Aplicar\u00e1s lo que has aprendido para resolver problemas m\u00e1s complejos, como calcular edades, verificar si un a\u00f1o es bisiesto, y crear un juego de adivinanzas. Cap\u00edtulo 4: Programaci\u00f3n Creativa Este es el cap\u00edtulo m\u00e1s divertido, donde usar\u00e1s tu creatividad para dise\u00f1ar patrones, crear figuras con asteriscos y mucho m\u00e1s. \u00a1Es hora de que tus ideas cobren vida en la pantalla! Cap\u00edtulo 5: Recursos Por \u00faltimo, te ofreceremos una serie de recursos adicionales para que sigas aprendiendo y explorando el mundo de la programaci\u00f3n. Ya sea que quieras aprender m\u00e1s o ense\u00f1ar a otros, aqu\u00ed encontrar\u00e1s todo lo que necesitas. Contacto # Si tienes alguna pregunta o necesitas ayuda con alguno de los ejercicios, no dudes en ponerte en contacto con nosotros. Este es un proyecto personal que hemos desarrollado en familia, y estamos entusiasmados por seguir mejor\u00e1ndolo y ampli\u00e1ndolo. Nos encantar\u00eda escuchar tus ideas y sugerencias para hacerlo a\u00fan m\u00e1s \u00fatil y divertido para todos. \u00a1Juntos podemos seguir aprendiendo programaci\u00f3n! Soy Ibon Mart\u00ednez-Arranz, un entusiasta de la tecnolog\u00eda y firme creyente en su capacidad para cambiar y mejorar el mundo. Mi pasi\u00f3n por la innovaci\u00f3n tecnol\u00f3gica no solo radica en su potencial para resolver problemas complejos, sino tambi\u00e9n en su poder para democratizar el acceso al conocimiento y crear oportunidades que antes eran inimaginables. Este manual te brindar\u00e1 los conocimientos y habilidades necesarios para convertir tus ideas en realidad a trav\u00e9s de la programaci\u00f3n. Ya sea que quieras crear juegos, aplicaciones o simplemente aprender c\u00f3mo funciona la tecnolog\u00eda, este es el lugar para comenzar. \u00a1Vamos a sumergirnos en el emocionante mundo de la programaci\u00f3n!","title":"Introducci\u00f3n"},{"location":"index.html#de_la_idea_al_codigo_guia_para_jovenes_programadores","text":"","title":"De la Idea al C\u00f3digo: Gu\u00eda para J\u00f3venes Programadores"},{"location":"index.html#introduccion","text":"\u00a1Bienvenidos a \"De la idea al c\u00f3digo: gu\u00eda para j\u00f3venes programadores\"! Este manual naci\u00f3 del deseo de ense\u00f1ar a mis propios hijos a programar, y ha sido un proyecto que hemos desarrollado juntos, paso a paso, en un emocionante viaje de aprendizaje. Programar no solo les ha permitido crear sus propios juegos y aplicaciones, sino que tambi\u00e9n ha sido una excelente manera de desarrollar su capacidad para resolver problemas y pensar de manera l\u00f3gica. En este libro, exploraremos las bases de la programaci\u00f3n utilizando Python, un lenguaje muy potente y f\u00e1cil de aprender, que hemos encontrado ideal para introducir a los m\u00e1s j\u00f3venes en este mundo. A medida que avances, te enfrentar\u00e1s a desaf\u00edos m\u00e1s complejos, pero no te preocupes, \u00a1estaremos contigo en cada paso del camino, tal como lo hemos estado con nuestros hijos! Cada cap\u00edtulo te ense\u00f1ar\u00e1 nuevos conceptos y habilidades, desde los fundamentos b\u00e1sicos hasta la creaci\u00f3n de proyectos m\u00e1s creativos y avanzados. Aprender\u00e1s c\u00f3mo las computadoras pueden realizar c\u00e1lculos, tomar decisiones y realizar tareas repetitivas. Pero lo m\u00e1s importante, te divertir\u00e1s mientras desarrollas tus propias creaciones, tal como lo hicimos nosotros. Este proyecto es un esfuerzo continuo y vivo, que ponemos a disposici\u00f3n de la comunidad con la esperanza de que sea \u00fatil para otros padres, educadores y j\u00f3venes programadores. Si encuentras valor en \u00e9l, si\u00e9ntete libre de compartirlo, usarlo y contribuir a su crecimiento. \u00a1Estamos emocionados de ver c\u00f3mo m\u00e1s ni\u00f1os pueden aprender y disfrutar de la programaci\u00f3n gracias a esta gu\u00eda!","title":"Introducci\u00f3n"},{"location":"index.html#estructura_del_manual","text":"Este manual est\u00e1 dividido en varios cap\u00edtulos, cada uno dise\u00f1ado para ense\u00f1arte algo nuevo y emocionante sobre la programaci\u00f3n: Cap\u00edtulo 1: Conceptos B\u00e1sicos de Programaci\u00f3n Empezaremos con lo m\u00e1s esencial: c\u00f3mo hacer que la computadora haga lo que t\u00fa quieras. Aprender\u00e1s a escribir tus primeros programas, como mostrar mensajes en la pantalla y realizar c\u00e1lculos sencillos. Cap\u00edtulo 2: Programaci\u00f3n Intermedia En este cap\u00edtulo, exploraremos c\u00f3mo las computadoras pueden tomar decisiones y repetir tareas. Aprender\u00e1s a crear tablas de multiplicar, simular juegos de dados, y manipular cadenas de texto. Cap\u00edtulo 3: Programaci\u00f3n Avanzada Aqu\u00ed es donde las cosas se ponen interesantes. Aplicar\u00e1s lo que has aprendido para resolver problemas m\u00e1s complejos, como calcular edades, verificar si un a\u00f1o es bisiesto, y crear un juego de adivinanzas. Cap\u00edtulo 4: Programaci\u00f3n Creativa Este es el cap\u00edtulo m\u00e1s divertido, donde usar\u00e1s tu creatividad para dise\u00f1ar patrones, crear figuras con asteriscos y mucho m\u00e1s. \u00a1Es hora de que tus ideas cobren vida en la pantalla! Cap\u00edtulo 5: Recursos Por \u00faltimo, te ofreceremos una serie de recursos adicionales para que sigas aprendiendo y explorando el mundo de la programaci\u00f3n. Ya sea que quieras aprender m\u00e1s o ense\u00f1ar a otros, aqu\u00ed encontrar\u00e1s todo lo que necesitas.","title":"Estructura del Manual"},{"location":"index.html#contacto","text":"Si tienes alguna pregunta o necesitas ayuda con alguno de los ejercicios, no dudes en ponerte en contacto con nosotros. Este es un proyecto personal que hemos desarrollado en familia, y estamos entusiasmados por seguir mejor\u00e1ndolo y ampli\u00e1ndolo. Nos encantar\u00eda escuchar tus ideas y sugerencias para hacerlo a\u00fan m\u00e1s \u00fatil y divertido para todos. \u00a1Juntos podemos seguir aprendiendo programaci\u00f3n! Soy Ibon Mart\u00ednez-Arranz, un entusiasta de la tecnolog\u00eda y firme creyente en su capacidad para cambiar y mejorar el mundo. Mi pasi\u00f3n por la innovaci\u00f3n tecnol\u00f3gica no solo radica en su potencial para resolver problemas complejos, sino tambi\u00e9n en su poder para democratizar el acceso al conocimiento y crear oportunidades que antes eran inimaginables. Este manual te brindar\u00e1 los conocimientos y habilidades necesarios para convertir tus ideas en realidad a trav\u00e9s de la programaci\u00f3n. Ya sea que quieras crear juegos, aplicaciones o simplemente aprender c\u00f3mo funciona la tecnolog\u00eda, este es el lugar para comenzar. \u00a1Vamos a sumergirnos en el emocionante mundo de la programaci\u00f3n!","title":"Contacto"},{"location":"01-basico.html","text":"Cap\u00edtulo 1: Conceptos B\u00e1sicos de Programaci\u00f3n # \u00a1Bienvenidos al primer cap\u00edtulo de nuestro viaje por el mundo de la programaci\u00f3n! Aqu\u00ed es donde todo comienza. En este cap\u00edtulo, aprenderemos los conceptos fundamentales de la programaci\u00f3n en Python, un lenguaje que es tan poderoso como f\u00e1cil de aprender. Si nunca has programado antes, no te preocupes. Este cap\u00edtulo est\u00e1 dise\u00f1ado para llevarte de la mano, paso a paso, desde lo m\u00e1s b\u00e1sico hasta que tengas las herramientas necesarias para crear tus propios programas. Empezaremos con algo muy sencillo: hacer que la computadora nos salude. A partir de ah\u00ed, veremos c\u00f3mo realizar operaciones matem\u00e1ticas b\u00e1sicas, calcular \u00e1reas de formas geom\u00e9tricas y m\u00e1s. Estos conceptos son la base de todo lo que haremos en los cap\u00edtulos siguientes, as\u00ed que presta mucha atenci\u00f3n y, sobre todo, \u00a1divi\u00e9rtete mientras aprendes! 1.1 Hola Mundo # El Reto # El primer programa que todos los programadores escriben es el famoso \"Hola Mundo\". Se trata de un programa muy sencillo que simplemente muestra un mensaje en la pantalla. Es el equivalente en programaci\u00f3n a dar el primer paso en un largo viaje. C\u00f3mo Resolverlo # Para resolver este problema, usaremos la funci\u00f3n print() en Python. Esta funci\u00f3n es utilizada para mostrar mensajes en la pantalla. Es muy simple: solo necesitamos escribir el mensaje que queremos mostrar entre comillas dentro de la funci\u00f3n print() . Pseudoc\u00f3digo # Empezar el programa. Escribir el mensaje \"Hola Mundo\". Mostrar el mensaje en la pantalla. Finalizar el programa. C\u00f3digo # # Imprime un saludo simple en la pantalla print(\"Hola Mundo\") # Esto imprimir\u00e1 \"Hola Mundo\" en la consola 1.2 Calculadora Sencilla # El Reto # Nuestro siguiente paso es crear un programa que pueda realizar operaciones matem\u00e1ticas b\u00e1sicas como suma, resta, multiplicaci\u00f3n y divisi\u00f3n. Este es un excelente ejercicio para aprender a manejar n\u00fameros y operaciones aritm\u00e9ticas en Python. C\u00f3mo Resolverlo # Para resolver este problema, pediremos al usuario que ingrese dos n\u00fameros. Luego, realizaremos las operaciones aritm\u00e9ticas con esos n\u00fameros y mostraremos los resultados. Usaremos la funci\u00f3n input() para obtener los n\u00fameros y print() para mostrar los resultados. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese el primer n\u00famero. Pedir al usuario que ingrese el segundo n\u00famero. Sumar los dos n\u00fameros y mostrar el resultado. Restar el segundo n\u00famero del primero y mostrar el resultado. Multiplicar los dos n\u00fameros y mostrar el resultado. Dividir el primer n\u00famero por el segundo y mostrar el resultado. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese dos n\u00fameros num1 = float(input(\"Ingresa el primer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num2 = float(input(\"Ingresa el segundo n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal # Realizamos operaciones aritm\u00e9ticas b\u00e1sicas y mostramos los resultados print(\"Suma:\", num1 + num2) # Imprime la suma de los dos n\u00fameros print(\"Resta:\", num1 - num2) # Imprime la resta del segundo n\u00famero del primero print(\"Multiplicaci\u00f3n:\", num1 * num2) # Imprime el producto de los dos n\u00fameros print(\"Divisi\u00f3n:\", num1 / num2) # Imprime la divisi\u00f3n del primer n\u00famero por el segundo 1.3 \u00c1rea de un Tri\u00e1ngulo # El Reto # En este ejercicio, vamos a calcular el \u00e1rea de un tri\u00e1ngulo. Esto es \u00fatil para aprender a trabajar con f\u00f3rmulas matem\u00e1ticas en un programa y para practicar el uso de variables y operaciones aritm\u00e9ticas. C\u00f3mo Resolverlo # Para calcular el \u00e1rea de un tri\u00e1ngulo, necesitamos la base y la altura. La f\u00f3rmula para el \u00e1rea de un tri\u00e1ngulo es: $$\\text{\u00c1rea} = \\frac{\\text{base} \\times \\text{altura}}{2}$$ Pediremos al usuario que ingrese la base y la altura, y luego utilizaremos esta f\u00f3rmula para calcular el \u00e1rea. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese la base del tri\u00e1ngulo. Pedir al usuario que ingrese la altura del tri\u00e1ngulo. Calcular el \u00e1rea del tri\u00e1ngulo utilizando la f\u00f3rmula: (base * altura) / 2. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese la base y la altura del tri\u00e1ngulo base = float(input(\"Ingresa la base del tri\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero decimal altura = float(input(\"Ingresa la altura del tri\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: (base * altura) / 2 area = (base * altura) / 2 # Multiplicamos base por altura y dividimos por 2 # Mostramos el resultado al usuario print(\"El \u00e1rea del tri\u00e1ngulo es:\", area) # Imprime el \u00e1rea calculada 1.4 \u00c1rea de un Cuadrado # El Reto # Ahora, vamos a calcular el \u00e1rea de un cuadrado. Este es un ejercicio sencillo pero importante para reforzar el concepto de c\u00f3mo usar variables y realizar operaciones matem\u00e1ticas b\u00e1sicas en Python. C\u00f3mo Resolverlo # Para calcular el \u00e1rea de un cuadrado, solo necesitamos la longitud de uno de sus lados. La f\u00f3rmula para el \u00e1rea de un cuadrado es: $$\\text{\u00c1rea} = \\text{lado} \\times \\text{lado}$$ Pediremos al usuario que ingrese la longitud del lado y luego calcularemos el \u00e1rea. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese la longitud de un lado del cuadrado. Calcular el \u00e1rea del cuadrado utilizando la f\u00f3rmula: lado * lado. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese la longitud de un lado del cuadrado lado = float(input(\"Ingresa la longitud de un lado del cuadrado: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: lado * lado area = lado * lado # Elevamos al cuadrado el valor ingresado # Mostramos el resultado al usuario print(\"El \u00e1rea del cuadrado es:\", area) # Imprime el \u00e1rea calculada 1.5 \u00c1rea de un C\u00edrculo # El Reto # Finalmente, vamos a calcular el \u00e1rea de un c\u00edrculo. Este ejercicio es un poco m\u00e1s avanzado porque involucra el uso de la constante matem\u00e1tica $\\pi$ (pi). C\u00f3mo Resolverlo # Para calcular el \u00e1rea de un c\u00edrculo, necesitamos el radio. La f\u00f3rmula para el \u00e1rea de un c\u00edrculo es: $$\\text{\u00c1rea} = \\pi \\times \\text{radio}^2$$ Python tiene una biblioteca llamada math que incluye el valor de $\\pi$. Usaremos esta biblioteca para hacer nuestro c\u00e1lculo. Pseudoc\u00f3digo # Empezar el programa. Importar la biblioteca math para usar $\\pi$. Pedir al usuario que ingrese el radio del c\u00edrculo. Calcular el \u00e1rea del c\u00edrculo utilizando la f\u00f3rmula: $\\pi \\times \\text{radio}^2$. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa. C\u00f3digo # import math # Importamos la biblioteca math para usar el valor de pi # Pedimos al usuario que ingrese el radio del c\u00edrculo radio = float(input(\"Ingresa el radio del c\u00edrculo: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: pi * radio^2 area = math.pi * radio * radio # Multiplicamos pi por el radio elevado al cuadrado # Mostramos el resultado al usuario print(\"El \u00e1rea del c\u00edrculo es:\", area) # Imprime el \u00e1rea calculada \u00a1Y con esto, hemos completado nuestro primer cap\u00edtulo sobre conceptos b\u00e1sicos de programaci\u00f3n! Estos ejercicios te han ense\u00f1ado c\u00f3mo interactuar con la computadora, realizar c\u00e1lculos simples y trabajar con variables. En el pr\u00f3ximo cap\u00edtulo, avanzaremos un poco m\u00e1s, explorando c\u00f3mo las computadoras pueden tomar decisiones y repetir tareas autom\u00e1ticamente. \u00a1Sigue adelante y sigue aprendiendo!","title":"B\u00e1sico"},{"location":"01-basico.html#capitulo_1_conceptos_basicos_de_programacion","text":"\u00a1Bienvenidos al primer cap\u00edtulo de nuestro viaje por el mundo de la programaci\u00f3n! Aqu\u00ed es donde todo comienza. En este cap\u00edtulo, aprenderemos los conceptos fundamentales de la programaci\u00f3n en Python, un lenguaje que es tan poderoso como f\u00e1cil de aprender. Si nunca has programado antes, no te preocupes. Este cap\u00edtulo est\u00e1 dise\u00f1ado para llevarte de la mano, paso a paso, desde lo m\u00e1s b\u00e1sico hasta que tengas las herramientas necesarias para crear tus propios programas. Empezaremos con algo muy sencillo: hacer que la computadora nos salude. A partir de ah\u00ed, veremos c\u00f3mo realizar operaciones matem\u00e1ticas b\u00e1sicas, calcular \u00e1reas de formas geom\u00e9tricas y m\u00e1s. Estos conceptos son la base de todo lo que haremos en los cap\u00edtulos siguientes, as\u00ed que presta mucha atenci\u00f3n y, sobre todo, \u00a1divi\u00e9rtete mientras aprendes!","title":"Cap\u00edtulo 1: Conceptos B\u00e1sicos de Programaci\u00f3n"},{"location":"01-basico.html#11_hola_mundo","text":"","title":"1.1 Hola Mundo"},{"location":"01-basico.html#el_reto","text":"El primer programa que todos los programadores escriben es el famoso \"Hola Mundo\". Se trata de un programa muy sencillo que simplemente muestra un mensaje en la pantalla. Es el equivalente en programaci\u00f3n a dar el primer paso en un largo viaje.","title":"El Reto"},{"location":"01-basico.html#como_resolverlo","text":"Para resolver este problema, usaremos la funci\u00f3n print() en Python. Esta funci\u00f3n es utilizada para mostrar mensajes en la pantalla. Es muy simple: solo necesitamos escribir el mensaje que queremos mostrar entre comillas dentro de la funci\u00f3n print() .","title":"C\u00f3mo Resolverlo"},{"location":"01-basico.html#pseudocodigo","text":"Empezar el programa. Escribir el mensaje \"Hola Mundo\". Mostrar el mensaje en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"01-basico.html#codigo","text":"# Imprime un saludo simple en la pantalla print(\"Hola Mundo\") # Esto imprimir\u00e1 \"Hola Mundo\" en la consola","title":"C\u00f3digo"},{"location":"01-basico.html#12_calculadora_sencilla","text":"","title":"1.2 Calculadora Sencilla"},{"location":"01-basico.html#el_reto_1","text":"Nuestro siguiente paso es crear un programa que pueda realizar operaciones matem\u00e1ticas b\u00e1sicas como suma, resta, multiplicaci\u00f3n y divisi\u00f3n. Este es un excelente ejercicio para aprender a manejar n\u00fameros y operaciones aritm\u00e9ticas en Python.","title":"El Reto"},{"location":"01-basico.html#como_resolverlo_1","text":"Para resolver este problema, pediremos al usuario que ingrese dos n\u00fameros. Luego, realizaremos las operaciones aritm\u00e9ticas con esos n\u00fameros y mostraremos los resultados. Usaremos la funci\u00f3n input() para obtener los n\u00fameros y print() para mostrar los resultados.","title":"C\u00f3mo Resolverlo"},{"location":"01-basico.html#pseudocodigo_1","text":"Empezar el programa. Pedir al usuario que ingrese el primer n\u00famero. Pedir al usuario que ingrese el segundo n\u00famero. Sumar los dos n\u00fameros y mostrar el resultado. Restar el segundo n\u00famero del primero y mostrar el resultado. Multiplicar los dos n\u00fameros y mostrar el resultado. Dividir el primer n\u00famero por el segundo y mostrar el resultado. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"01-basico.html#codigo_1","text":"# Pedimos al usuario que ingrese dos n\u00fameros num1 = float(input(\"Ingresa el primer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num2 = float(input(\"Ingresa el segundo n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal # Realizamos operaciones aritm\u00e9ticas b\u00e1sicas y mostramos los resultados print(\"Suma:\", num1 + num2) # Imprime la suma de los dos n\u00fameros print(\"Resta:\", num1 - num2) # Imprime la resta del segundo n\u00famero del primero print(\"Multiplicaci\u00f3n:\", num1 * num2) # Imprime el producto de los dos n\u00fameros print(\"Divisi\u00f3n:\", num1 / num2) # Imprime la divisi\u00f3n del primer n\u00famero por el segundo","title":"C\u00f3digo"},{"location":"01-basico.html#13_area_de_un_triangulo","text":"","title":"1.3 \u00c1rea de un Tri\u00e1ngulo"},{"location":"01-basico.html#el_reto_2","text":"En este ejercicio, vamos a calcular el \u00e1rea de un tri\u00e1ngulo. Esto es \u00fatil para aprender a trabajar con f\u00f3rmulas matem\u00e1ticas en un programa y para practicar el uso de variables y operaciones aritm\u00e9ticas.","title":"El Reto"},{"location":"01-basico.html#como_resolverlo_2","text":"Para calcular el \u00e1rea de un tri\u00e1ngulo, necesitamos la base y la altura. La f\u00f3rmula para el \u00e1rea de un tri\u00e1ngulo es: $$\\text{\u00c1rea} = \\frac{\\text{base} \\times \\text{altura}}{2}$$ Pediremos al usuario que ingrese la base y la altura, y luego utilizaremos esta f\u00f3rmula para calcular el \u00e1rea.","title":"C\u00f3mo Resolverlo"},{"location":"01-basico.html#pseudocodigo_2","text":"Empezar el programa. Pedir al usuario que ingrese la base del tri\u00e1ngulo. Pedir al usuario que ingrese la altura del tri\u00e1ngulo. Calcular el \u00e1rea del tri\u00e1ngulo utilizando la f\u00f3rmula: (base * altura) / 2. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"01-basico.html#codigo_2","text":"# Pedimos al usuario que ingrese la base y la altura del tri\u00e1ngulo base = float(input(\"Ingresa la base del tri\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero decimal altura = float(input(\"Ingresa la altura del tri\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: (base * altura) / 2 area = (base * altura) / 2 # Multiplicamos base por altura y dividimos por 2 # Mostramos el resultado al usuario print(\"El \u00e1rea del tri\u00e1ngulo es:\", area) # Imprime el \u00e1rea calculada","title":"C\u00f3digo"},{"location":"01-basico.html#14_area_de_un_cuadrado","text":"","title":"1.4 \u00c1rea de un Cuadrado"},{"location":"01-basico.html#el_reto_3","text":"Ahora, vamos a calcular el \u00e1rea de un cuadrado. Este es un ejercicio sencillo pero importante para reforzar el concepto de c\u00f3mo usar variables y realizar operaciones matem\u00e1ticas b\u00e1sicas en Python.","title":"El Reto"},{"location":"01-basico.html#como_resolverlo_3","text":"Para calcular el \u00e1rea de un cuadrado, solo necesitamos la longitud de uno de sus lados. La f\u00f3rmula para el \u00e1rea de un cuadrado es: $$\\text{\u00c1rea} = \\text{lado} \\times \\text{lado}$$ Pediremos al usuario que ingrese la longitud del lado y luego calcularemos el \u00e1rea.","title":"C\u00f3mo Resolverlo"},{"location":"01-basico.html#pseudocodigo_3","text":"Empezar el programa. Pedir al usuario que ingrese la longitud de un lado del cuadrado. Calcular el \u00e1rea del cuadrado utilizando la f\u00f3rmula: lado * lado. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"01-basico.html#codigo_3","text":"# Pedimos al usuario que ingrese la longitud de un lado del cuadrado lado = float(input(\"Ingresa la longitud de un lado del cuadrado: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: lado * lado area = lado * lado # Elevamos al cuadrado el valor ingresado # Mostramos el resultado al usuario print(\"El \u00e1rea del cuadrado es:\", area) # Imprime el \u00e1rea calculada","title":"C\u00f3digo"},{"location":"01-basico.html#15_area_de_un_circulo","text":"","title":"1.5 \u00c1rea de un C\u00edrculo"},{"location":"01-basico.html#el_reto_4","text":"Finalmente, vamos a calcular el \u00e1rea de un c\u00edrculo. Este ejercicio es un poco m\u00e1s avanzado porque involucra el uso de la constante matem\u00e1tica $\\pi$ (pi).","title":"El Reto"},{"location":"01-basico.html#como_resolverlo_4","text":"Para calcular el \u00e1rea de un c\u00edrculo, necesitamos el radio. La f\u00f3rmula para el \u00e1rea de un c\u00edrculo es: $$\\text{\u00c1rea} = \\pi \\times \\text{radio}^2$$ Python tiene una biblioteca llamada math que incluye el valor de $\\pi$. Usaremos esta biblioteca para hacer nuestro c\u00e1lculo.","title":"C\u00f3mo Resolverlo"},{"location":"01-basico.html#pseudocodigo_4","text":"Empezar el programa. Importar la biblioteca math para usar $\\pi$. Pedir al usuario que ingrese el radio del c\u00edrculo. Calcular el \u00e1rea del c\u00edrculo utilizando la f\u00f3rmula: $\\pi \\times \\text{radio}^2$. Mostrar el \u00e1rea calculada en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"01-basico.html#codigo_4","text":"import math # Importamos la biblioteca math para usar el valor de pi # Pedimos al usuario que ingrese el radio del c\u00edrculo radio = float(input(\"Ingresa el radio del c\u00edrculo: \")) # Convertimos la entrada a un n\u00famero decimal # Calculamos el \u00e1rea usando la f\u00f3rmula: pi * radio^2 area = math.pi * radio * radio # Multiplicamos pi por el radio elevado al cuadrado # Mostramos el resultado al usuario print(\"El \u00e1rea del c\u00edrculo es:\", area) # Imprime el \u00e1rea calculada \u00a1Y con esto, hemos completado nuestro primer cap\u00edtulo sobre conceptos b\u00e1sicos de programaci\u00f3n! Estos ejercicios te han ense\u00f1ado c\u00f3mo interactuar con la computadora, realizar c\u00e1lculos simples y trabajar con variables. En el pr\u00f3ximo cap\u00edtulo, avanzaremos un poco m\u00e1s, explorando c\u00f3mo las computadoras pueden tomar decisiones y repetir tareas autom\u00e1ticamente. \u00a1Sigue adelante y sigue aprendiendo!","title":"C\u00f3digo"},{"location":"02-intermedio.html","text":"Cap\u00edtulo 2: Programaci\u00f3n Intermedia # \u00a1Felicidades por completar el primer cap\u00edtulo! Ahora que ya tienes una base s\u00f3lida en los conceptos b\u00e1sicos de programaci\u00f3n, es momento de dar un paso m\u00e1s y explorar algunas ideas m\u00e1s complejas. En este cap\u00edtulo, nos centraremos en c\u00f3mo las computadoras pueden tomar decisiones y realizar tareas repetitivas autom\u00e1ticamente. Estos conceptos son fundamentales en la programaci\u00f3n, ya que nos permiten escribir programas m\u00e1s \u00fatiles y din\u00e1micos. Vamos a explorar c\u00f3mo podemos crear tablas de multiplicar, jugar a los dados de manera autom\u00e1tica, y c\u00f3mo hacer que la computadora nos salude de manera personalizada. Adem\u00e1s, trabajaremos con cadenas de texto para realizar tareas m\u00e1s interesantes, como contar vocales. Este cap\u00edtulo est\u00e1 dise\u00f1ado para que practiques y consolides lo que has aprendido, mientras te introduces en conceptos m\u00e1s avanzados que te preparar\u00e1n para los desaf\u00edos que vendr\u00e1n en los siguientes cap\u00edtulos. 2.1 Tabla de Multiplicar # El Reto # Una de las primeras cosas \u00fatiles que podemos hacer con la programaci\u00f3n es automatizar c\u00e1lculos repetitivos. En este ejercicio, vamos a crear un programa que genere la tabla de multiplicar de cualquier n\u00famero que el usuario elija. Esto es \u00fatil no solo para practicar matem\u00e1ticas, sino tambi\u00e9n para entender c\u00f3mo funcionan los bucles en programaci\u00f3n. C\u00f3mo Resolverlo # Para resolver este problema, utilizaremos un bucle for que recorre los n\u00fameros del 1 al 10. En cada iteraci\u00f3n del bucle, multiplicaremos el n\u00famero ingresado por el usuario por el n\u00famero de la iteraci\u00f3n, y mostraremos el resultado. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese un n\u00famero. Para cada n\u00famero del 1 al 10: Multiplicar el n\u00famero del usuario por el n\u00famero actual del bucle. Mostrar el resultado de la multiplicaci\u00f3n. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese un n\u00famero para calcular su tabla de multiplicar numero = int(input(\"Ingresa un n\u00famero para ver su tabla de multiplicar: \")) # Convertimos la entrada a un n\u00famero entero # Usamos un bucle for para iterar desde 1 hasta 10 for i in range(1, 11): # Recorremos los n\u00fameros del 1 al 10 # Mostramos el resultado de la multiplicaci\u00f3n en cada iteraci\u00f3n print(f\"{numero} x {i} = {numero * i}\") # Imprime el resultado de la multiplicaci\u00f3n 2.2 Juego de Dados # El Reto # \u00a1Hora de divertirnos un poco! En este ejercicio, vamos a simular el lanzamiento de dos dados y determinar cu\u00e1l de los dos tiene el valor m\u00e1s alto. Esto es una excelente pr\u00e1ctica para trabajar con n\u00fameros aleatorios, un concepto muy \u00fatil en la programaci\u00f3n de juegos. C\u00f3mo Resolverlo # Para resolver este problema, usaremos la funci\u00f3n randint() de la biblioteca random para simular el lanzamiento de los dados. Luego, compararemos los valores obtenidos para determinar el ganador. Pseudoc\u00f3digo # Empezar el programa. Generar un n\u00famero aleatorio entre 1 y 6 para el primer dado. Generar un n\u00famero aleatorio entre 1 y 6 para el segundo dado. Mostrar los valores de ambos dados. Comparar los valores: Si el primer dado es mayor, mostrar que el primer dado gana. Si el segundo dado es mayor, mostrar que el segundo dado gana. Si los dos dados son iguales, mostrar que es un empate. Finalizar el programa. C\u00f3digo # import random # Importamos la biblioteca random para generar n\u00fameros aleatorios # Generamos dos n\u00fameros aleatorios entre 1 y 6, como si fueran dados dado1 = random.randint(1, 6) # Genera un n\u00famero aleatorio para el primer dado dado2 = random.randint(1, 6) # Genera un n\u00famero aleatorio para el segundo dado # Mostramos los valores de los dados print(f\"El primer dado sac\u00f3: {dado1}\") # Imprime el valor del primer dado print(f\"El segundo dado sac\u00f3: {dado2}\") # Imprime el valor del segundo dado # Determinamos qui\u00e9n gan\u00f3 o si fue un empate if dado1 > dado2: print(\"El primer dado gana\") # Imprime si el primer dado es mayor elif dado1 < dado2: print(\"El segundo dado gana\") # Imprime si el segundo dado es mayor else: print(\"Es un empate\") # Imprime si ambos dados tienen el mismo valor 2.3 Saludo Personalizado # El Reto # En este ejercicio, vamos a hacer que el programa sea m\u00e1s interactivo. Queremos que el programa pregunte el nombre del usuario y luego lo salude de manera personalizada. Esto es un gran ejemplo de c\u00f3mo los programas pueden interactuar con las personas y hacer que la experiencia sea m\u00e1s personal y divertida. C\u00f3mo Resolverlo # Para resolver este problema, usaremos la funci\u00f3n input() para obtener el nombre del usuario y luego usaremos la funci\u00f3n print() para mostrar un mensaje personalizado. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese su nombre. Mostrar un saludo personalizado usando el nombre del usuario. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese su nombre nombre = input(\"\u00bfCu\u00e1l es tu nombre? \") # Guardamos la entrada del usuario # Saludamos al usuario usando su nombre print(f\"Hola, {nombre}\") # Imprime un saludo personalizado 2.4 Cadenas de Texto # El Reto # Las cadenas de texto son una parte fundamental de la programaci\u00f3n. En este ejercicio, vamos a trabajar con cadenas para aprender c\u00f3mo podemos manipular texto en Python. Espec\u00edficamente, vamos a pedir al usuario que ingrese una cadena de texto, y luego vamos a realizar algunas operaciones b\u00e1sicas con esa cadena. C\u00f3mo Resolverlo # Trabajaremos con varias funciones incorporadas en Python para manipular la cadena de texto. Veremos c\u00f3mo contar la longitud de la cadena, convertirla a may\u00fasculas y mostrarla al rev\u00e9s. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese una cadena de texto. Mostrar la longitud de la cadena. Convertir la cadena a may\u00fasculas y mostrarla. Invertir la cadena y mostrarla. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese una cadena de texto texto = input(\"Ingresa una cadena de texto: \") # Guardamos la entrada del usuario # Mostramos la longitud de la cadena print(\"La longitud de la cadena es:\", len(texto)) # Imprime el n\u00famero de caracteres en la cadena # Convertimos la cadena a may\u00fasculas y la mostramos print(\"La cadena en may\u00fasculas es:\", texto.upper()) # Convierte la cadena a may\u00fasculas # Invertimos la cadena y la mostramos print(\"La cadena al rev\u00e9s es:\", texto[::-1]) # Imprime la cadena invertida 2.5 Contador de Vocales # El Reto # En este ejercicio, vamos a trabajar con cadenas de texto para contar cu\u00e1ntas vocales contiene una cadena. Este es un excelente ejercicio para practicar el trabajo con bucles y condiciones en programaci\u00f3n. C\u00f3mo Resolverlo # Para resolver este problema, recorreremos cada car\u00e1cter de la cadena y verificaremos si es una vocal. Si lo es, aumentaremos un contador. Al final, mostraremos el n\u00famero total de vocales encontradas. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese una cadena de texto. Inicializar un contador de vocales en 0. Recorrer cada car\u00e1cter de la cadena: Si el car\u00e1cter es una vocal, aumentar el contador. Mostrar el n\u00famero total de vocales encontradas. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese una cadena de texto texto = input(\"Ingresa una cadena de texto: \") # Guardamos la entrada del usuario # Definimos un conjunto de vocales para comparar vocales = \"aeiouAEIOU\" # Incluimos tanto may\u00fasculas como min\u00fasculas contador = 0 # Inicializamos un contador # Iteramos a trav\u00e9s de cada car\u00e1cter en la cadena for char in texto: if char in vocales: # Verificamos si el car\u00e1cter es una vocal contador += 1 # Aumentamos el contador si es una vocal # Mostramos el n\u00famero total de vocales encontradas print(\"El n\u00famero de vocales en la cadena es:\", contador) # Imprime el conteo de vocales \u00a1Y con esto, hemos completado nuestro segundo cap\u00edtulo! Estos ejercicios intermedios te han ense\u00f1ado a trabajar con bucles, condiciones y cadenas de texto, lo que te permitir\u00e1 escribir programas m\u00e1s interactivos y \u00fatiles. En el pr\u00f3ximo cap\u00edtulo, profundizaremos a\u00fan m\u00e1s y te enfrentaremos a desaf\u00edos m\u00e1s avanzados que te ayudar\u00e1n a convertirte en un programador a\u00fan m\u00e1s habilidoso. \u00a1Sigue as\u00ed!","title":"Intermedio"},{"location":"02-intermedio.html#capitulo_2_programacion_intermedia","text":"\u00a1Felicidades por completar el primer cap\u00edtulo! Ahora que ya tienes una base s\u00f3lida en los conceptos b\u00e1sicos de programaci\u00f3n, es momento de dar un paso m\u00e1s y explorar algunas ideas m\u00e1s complejas. En este cap\u00edtulo, nos centraremos en c\u00f3mo las computadoras pueden tomar decisiones y realizar tareas repetitivas autom\u00e1ticamente. Estos conceptos son fundamentales en la programaci\u00f3n, ya que nos permiten escribir programas m\u00e1s \u00fatiles y din\u00e1micos. Vamos a explorar c\u00f3mo podemos crear tablas de multiplicar, jugar a los dados de manera autom\u00e1tica, y c\u00f3mo hacer que la computadora nos salude de manera personalizada. Adem\u00e1s, trabajaremos con cadenas de texto para realizar tareas m\u00e1s interesantes, como contar vocales. Este cap\u00edtulo est\u00e1 dise\u00f1ado para que practiques y consolides lo que has aprendido, mientras te introduces en conceptos m\u00e1s avanzados que te preparar\u00e1n para los desaf\u00edos que vendr\u00e1n en los siguientes cap\u00edtulos.","title":"Cap\u00edtulo 2: Programaci\u00f3n Intermedia"},{"location":"02-intermedio.html#21_tabla_de_multiplicar","text":"","title":"2.1 Tabla de Multiplicar"},{"location":"02-intermedio.html#el_reto","text":"Una de las primeras cosas \u00fatiles que podemos hacer con la programaci\u00f3n es automatizar c\u00e1lculos repetitivos. En este ejercicio, vamos a crear un programa que genere la tabla de multiplicar de cualquier n\u00famero que el usuario elija. Esto es \u00fatil no solo para practicar matem\u00e1ticas, sino tambi\u00e9n para entender c\u00f3mo funcionan los bucles en programaci\u00f3n.","title":"El Reto"},{"location":"02-intermedio.html#como_resolverlo","text":"Para resolver este problema, utilizaremos un bucle for que recorre los n\u00fameros del 1 al 10. En cada iteraci\u00f3n del bucle, multiplicaremos el n\u00famero ingresado por el usuario por el n\u00famero de la iteraci\u00f3n, y mostraremos el resultado.","title":"C\u00f3mo Resolverlo"},{"location":"02-intermedio.html#pseudocodigo","text":"Empezar el programa. Pedir al usuario que ingrese un n\u00famero. Para cada n\u00famero del 1 al 10: Multiplicar el n\u00famero del usuario por el n\u00famero actual del bucle. Mostrar el resultado de la multiplicaci\u00f3n. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"02-intermedio.html#codigo","text":"# Pedimos al usuario que ingrese un n\u00famero para calcular su tabla de multiplicar numero = int(input(\"Ingresa un n\u00famero para ver su tabla de multiplicar: \")) # Convertimos la entrada a un n\u00famero entero # Usamos un bucle for para iterar desde 1 hasta 10 for i in range(1, 11): # Recorremos los n\u00fameros del 1 al 10 # Mostramos el resultado de la multiplicaci\u00f3n en cada iteraci\u00f3n print(f\"{numero} x {i} = {numero * i}\") # Imprime el resultado de la multiplicaci\u00f3n","title":"C\u00f3digo"},{"location":"02-intermedio.html#22_juego_de_dados","text":"","title":"2.2 Juego de Dados"},{"location":"02-intermedio.html#el_reto_1","text":"\u00a1Hora de divertirnos un poco! En este ejercicio, vamos a simular el lanzamiento de dos dados y determinar cu\u00e1l de los dos tiene el valor m\u00e1s alto. Esto es una excelente pr\u00e1ctica para trabajar con n\u00fameros aleatorios, un concepto muy \u00fatil en la programaci\u00f3n de juegos.","title":"El Reto"},{"location":"02-intermedio.html#como_resolverlo_1","text":"Para resolver este problema, usaremos la funci\u00f3n randint() de la biblioteca random para simular el lanzamiento de los dados. Luego, compararemos los valores obtenidos para determinar el ganador.","title":"C\u00f3mo Resolverlo"},{"location":"02-intermedio.html#pseudocodigo_1","text":"Empezar el programa. Generar un n\u00famero aleatorio entre 1 y 6 para el primer dado. Generar un n\u00famero aleatorio entre 1 y 6 para el segundo dado. Mostrar los valores de ambos dados. Comparar los valores: Si el primer dado es mayor, mostrar que el primer dado gana. Si el segundo dado es mayor, mostrar que el segundo dado gana. Si los dos dados son iguales, mostrar que es un empate. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"02-intermedio.html#codigo_1","text":"import random # Importamos la biblioteca random para generar n\u00fameros aleatorios # Generamos dos n\u00fameros aleatorios entre 1 y 6, como si fueran dados dado1 = random.randint(1, 6) # Genera un n\u00famero aleatorio para el primer dado dado2 = random.randint(1, 6) # Genera un n\u00famero aleatorio para el segundo dado # Mostramos los valores de los dados print(f\"El primer dado sac\u00f3: {dado1}\") # Imprime el valor del primer dado print(f\"El segundo dado sac\u00f3: {dado2}\") # Imprime el valor del segundo dado # Determinamos qui\u00e9n gan\u00f3 o si fue un empate if dado1 > dado2: print(\"El primer dado gana\") # Imprime si el primer dado es mayor elif dado1 < dado2: print(\"El segundo dado gana\") # Imprime si el segundo dado es mayor else: print(\"Es un empate\") # Imprime si ambos dados tienen el mismo valor","title":"C\u00f3digo"},{"location":"02-intermedio.html#23_saludo_personalizado","text":"","title":"2.3 Saludo Personalizado"},{"location":"02-intermedio.html#el_reto_2","text":"En este ejercicio, vamos a hacer que el programa sea m\u00e1s interactivo. Queremos que el programa pregunte el nombre del usuario y luego lo salude de manera personalizada. Esto es un gran ejemplo de c\u00f3mo los programas pueden interactuar con las personas y hacer que la experiencia sea m\u00e1s personal y divertida.","title":"El Reto"},{"location":"02-intermedio.html#como_resolverlo_2","text":"Para resolver este problema, usaremos la funci\u00f3n input() para obtener el nombre del usuario y luego usaremos la funci\u00f3n print() para mostrar un mensaje personalizado.","title":"C\u00f3mo Resolverlo"},{"location":"02-intermedio.html#pseudocodigo_2","text":"Empezar el programa. Pedir al usuario que ingrese su nombre. Mostrar un saludo personalizado usando el nombre del usuario. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"02-intermedio.html#codigo_2","text":"# Pedimos al usuario que ingrese su nombre nombre = input(\"\u00bfCu\u00e1l es tu nombre? \") # Guardamos la entrada del usuario # Saludamos al usuario usando su nombre print(f\"Hola, {nombre}\") # Imprime un saludo personalizado","title":"C\u00f3digo"},{"location":"02-intermedio.html#24_cadenas_de_texto","text":"","title":"2.4 Cadenas de Texto"},{"location":"02-intermedio.html#el_reto_3","text":"Las cadenas de texto son una parte fundamental de la programaci\u00f3n. En este ejercicio, vamos a trabajar con cadenas para aprender c\u00f3mo podemos manipular texto en Python. Espec\u00edficamente, vamos a pedir al usuario que ingrese una cadena de texto, y luego vamos a realizar algunas operaciones b\u00e1sicas con esa cadena.","title":"El Reto"},{"location":"02-intermedio.html#como_resolverlo_3","text":"Trabajaremos con varias funciones incorporadas en Python para manipular la cadena de texto. Veremos c\u00f3mo contar la longitud de la cadena, convertirla a may\u00fasculas y mostrarla al rev\u00e9s.","title":"C\u00f3mo Resolverlo"},{"location":"02-intermedio.html#pseudocodigo_3","text":"Empezar el programa. Pedir al usuario que ingrese una cadena de texto. Mostrar la longitud de la cadena. Convertir la cadena a may\u00fasculas y mostrarla. Invertir la cadena y mostrarla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"02-intermedio.html#codigo_3","text":"# Pedimos al usuario que ingrese una cadena de texto texto = input(\"Ingresa una cadena de texto: \") # Guardamos la entrada del usuario # Mostramos la longitud de la cadena print(\"La longitud de la cadena es:\", len(texto)) # Imprime el n\u00famero de caracteres en la cadena # Convertimos la cadena a may\u00fasculas y la mostramos print(\"La cadena en may\u00fasculas es:\", texto.upper()) # Convierte la cadena a may\u00fasculas # Invertimos la cadena y la mostramos print(\"La cadena al rev\u00e9s es:\", texto[::-1]) # Imprime la cadena invertida","title":"C\u00f3digo"},{"location":"02-intermedio.html#25_contador_de_vocales","text":"","title":"2.5 Contador de Vocales"},{"location":"02-intermedio.html#el_reto_4","text":"En este ejercicio, vamos a trabajar con cadenas de texto para contar cu\u00e1ntas vocales contiene una cadena. Este es un excelente ejercicio para practicar el trabajo con bucles y condiciones en programaci\u00f3n.","title":"El Reto"},{"location":"02-intermedio.html#como_resolverlo_4","text":"Para resolver este problema, recorreremos cada car\u00e1cter de la cadena y verificaremos si es una vocal. Si lo es, aumentaremos un contador. Al final, mostraremos el n\u00famero total de vocales encontradas.","title":"C\u00f3mo Resolverlo"},{"location":"02-intermedio.html#pseudocodigo_4","text":"Empezar el programa. Pedir al usuario que ingrese una cadena de texto. Inicializar un contador de vocales en 0. Recorrer cada car\u00e1cter de la cadena: Si el car\u00e1cter es una vocal, aumentar el contador. Mostrar el n\u00famero total de vocales encontradas. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"02-intermedio.html#codigo_4","text":"# Pedimos al usuario que ingrese una cadena de texto texto = input(\"Ingresa una cadena de texto: \") # Guardamos la entrada del usuario # Definimos un conjunto de vocales para comparar vocales = \"aeiouAEIOU\" # Incluimos tanto may\u00fasculas como min\u00fasculas contador = 0 # Inicializamos un contador # Iteramos a trav\u00e9s de cada car\u00e1cter en la cadena for char in texto: if char in vocales: # Verificamos si el car\u00e1cter es una vocal contador += 1 # Aumentamos el contador si es una vocal # Mostramos el n\u00famero total de vocales encontradas print(\"El n\u00famero de vocales en la cadena es:\", contador) # Imprime el conteo de vocales \u00a1Y con esto, hemos completado nuestro segundo cap\u00edtulo! Estos ejercicios intermedios te han ense\u00f1ado a trabajar con bucles, condiciones y cadenas de texto, lo que te permitir\u00e1 escribir programas m\u00e1s interactivos y \u00fatiles. En el pr\u00f3ximo cap\u00edtulo, profundizaremos a\u00fan m\u00e1s y te enfrentaremos a desaf\u00edos m\u00e1s avanzados que te ayudar\u00e1n a convertirte en un programador a\u00fan m\u00e1s habilidoso. \u00a1Sigue as\u00ed!","title":"C\u00f3digo"},{"location":"03-avanzado.html","text":"Cap\u00edtulo 3: Programaci\u00f3n Avanzada # \u00a1Bienvenido al tercer cap\u00edtulo de nuestro viaje en el mundo de la programaci\u00f3n! Hasta ahora, has aprendido los conceptos b\u00e1sicos y has explorado c\u00f3mo las computadoras pueden tomar decisiones y realizar tareas repetitivas. En este cap\u00edtulo, vamos a profundizar un poco m\u00e1s en la programaci\u00f3n y enfrentarnos a desaf\u00edos m\u00e1s complejos. Este es el momento de combinar lo que has aprendido y aplicarlo a problemas que requieren un pensamiento m\u00e1s avanzado. Trabajaremos con c\u00e1lculos m\u00e1s sofisticados, como determinar el n\u00famero mayor entre tres valores, crear un juego para adivinar n\u00fameros, calcular la edad bas\u00e1ndonos en el a\u00f1o de nacimiento, y verificar si un a\u00f1o es bisiesto. Estos ejercicios no solo te ayudar\u00e1n a mejorar tus habilidades de programaci\u00f3n, sino que tambi\u00e9n te mostrar\u00e1n c\u00f3mo la programaci\u00f3n puede ser \u00fatil en situaciones pr\u00e1cticas de la vida real. 3.1 N\u00famero Mayor # El Reto # En este ejercicio, necesitamos determinar cu\u00e1l es el n\u00famero mayor entre tres valores proporcionados por el usuario. Este tipo de problema es \u00fatil cuando se trabaja con comparaciones y decisiones basadas en condiciones. C\u00f3mo Resolverlo # Para resolver este problema, utilizaremos la funci\u00f3n max() de Python, que nos permite encontrar el valor m\u00e1ximo entre varios n\u00fameros. Pediremos al usuario que ingrese tres n\u00fameros, los compararemos y luego mostraremos el n\u00famero mayor. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese el primer n\u00famero. Pedir al usuario que ingrese el segundo n\u00famero. Pedir al usuario que ingrese el tercer n\u00famero. Comparar los tres n\u00fameros usando la funci\u00f3n max . Mostrar el n\u00famero mayor en la pantalla. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese tres n\u00fameros num1 = float(input(\"Ingresa el primer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num2 = float(input(\"Ingresa el segundo n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num3 = float(input(\"Ingresa el tercer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal # Usamos la funci\u00f3n max para encontrar el n\u00famero mayor mayor = max(num1, num2, num3) # Encuentra el mayor de los tres n\u00fameros # Mostramos el n\u00famero mayor print(\"El n\u00famero mayor es:\", mayor) # Imprime el mayor n\u00famero 3.2 Adivina el N\u00famero # El Reto # Vamos a crear un juego sencillo en el que la computadora elige un n\u00famero al azar entre 1 y 100, y el usuario tiene que adivinarlo. Despu\u00e9s de cada intento, la computadora dar\u00e1 pistas indicando si el n\u00famero es mayor o menor que el intento del usuario. C\u00f3mo Resolverlo # Para resolver este problema, utilizaremos la funci\u00f3n randint() de la biblioteca random para generar un n\u00famero aleatorio. Luego, usaremos un bucle while para permitir al usuario hacer intentos hasta que adivine correctamente. En cada intento, compararemos el n\u00famero ingresado por el usuario con el n\u00famero secreto y daremos una pista. Pseudoc\u00f3digo # Empezar el programa. Generar un n\u00famero aleatorio entre 1 y 100 y guardarlo como numero_secreto . Inicializar un contador de intentos en 0. Repetir hasta que el usuario adivine el n\u00famero: Pedir al usuario que ingrese un n\u00famero. Aumentar el contador de intentos. Si el n\u00famero es menor que numero_secreto , mostrar \"Muy bajo, intenta de nuevo\". Si el n\u00famero es mayor que numero_secreto , mostrar \"Muy alto, intenta de nuevo\". Si el n\u00famero es igual a numero_secreto , mostrar \"Felicidades\" y salir del bucle. Mostrar el n\u00famero de intentos realizados. Finalizar el programa. C\u00f3digo # import random # Importamos la biblioteca random para generar un n\u00famero aleatorio # Generamos un n\u00famero aleatorio entre 1 y 100 numero_secreto = random.randint(1, 100) # Guardamos el n\u00famero aleatorio intentos = 0 # Inicializamos un contador de intentos # Creamos un bucle para que el usuario adivine el n\u00famero while True: intento = int(input(\"Adivina el n\u00famero (entre 1 y 100): \")) # Pedimos un n\u00famero al usuario intentos += 1 # Aumentamos el contador de intentos # Comparamos el intento con el n\u00famero secreto if intento < numero_secreto: print(\"Muy bajo, intenta de nuevo.\") # El n\u00famero es menor al secreto elif intento > numero_secreto: print(\"Muy alto, intenta de nuevo.\") # El n\u00famero es mayor al secreto else: print(f\"Felicidades, adivinaste el n\u00famero en {intentos} intentos.\") # El n\u00famero es correcto break # Salimos del bucle 3.3 Calcula la Edad # El Reto # En este ejercicio, vamos a calcular la edad de una persona bas\u00e1ndonos en su a\u00f1o de nacimiento. Este ejercicio es \u00fatil para aprender a trabajar con fechas y operaciones aritm\u00e9ticas b\u00e1sicas. C\u00f3mo Resolverlo # Para resolver este problema, primero pediremos al usuario que ingrese su a\u00f1o de nacimiento. Luego, obtendremos el a\u00f1o actual utilizando la biblioteca datetime , restaremos el a\u00f1o de nacimiento del a\u00f1o actual, y as\u00ed obtendremos la edad de la persona. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese su a\u00f1o de nacimiento. Obtener el a\u00f1o actual utilizando la biblioteca datetime . Calcular la edad restando el a\u00f1o de nacimiento del a\u00f1o actual. Mostrar la edad en la pantalla. Finalizar el programa. C\u00f3digo # from datetime import datetime # Importamos la biblioteca datetime para manejar fechas # Pedimos al usuario que ingrese su a\u00f1o de nacimiento ano_nacimiento = int(input(\"\u00bfEn qu\u00e9 a\u00f1o naciste? \")) # Convertimos la entrada a un n\u00famero entero # Obtenemos el a\u00f1o actual usando datetime ano_actual = datetime.now().year # Obtenemos el a\u00f1o actual # Calculamos la edad restando el a\u00f1o de nacimiento al a\u00f1o actual edad = ano_actual - ano_nacimiento # Calculamos la diferencia de a\u00f1os # Mostramos la edad del usuario print(f\"Tienes {edad} a\u00f1os.\") # Imprime la edad calculada 3.4 A\u00f1o Bisiesto # El Reto # Un a\u00f1o bisiesto es aquel que tiene un d\u00eda adicional (29 de febrero), y ocurre cada cuatro a\u00f1os, con algunas excepciones. En este ejercicio, escribiremos un programa que determine si un a\u00f1o ingresado por el usuario es bisiesto o no. C\u00f3mo Resolverlo # Para resolver este problema, aplicaremos las reglas de los a\u00f1os bisiestos: un a\u00f1o es bisiesto si es divisible por 4, pero no por 100, a menos que tambi\u00e9n sea divisible por 400. Usaremos estas condiciones en un bloque if-elif-else . Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese un a\u00f1o. Verificar si el a\u00f1o es divisible por 4 y no divisible por 100, o si es divisible por 400: Si es as\u00ed, mostrar que el a\u00f1o es bisiesto. De lo contrario, mostrar que el a\u00f1o no es bisiesto. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese un a\u00f1o ano = int(input(\"Ingresa un a\u00f1o: \")) # Convertimos la entrada a un n\u00famero entero # Verificamos si el a\u00f1o es bisiesto if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0): print(f\"El a\u00f1o {ano} es bisiesto.\") # Imprime si el a\u00f1o es bisiesto else: print(f\"El a\u00f1o {ano} no es bisiesto.\") # Imprime si el a\u00f1o no es bisiesto 3.5 Conversi\u00f3n de Temperaturas # El Reto # En este ejercicio, vamos a crear un programa que convierta temperaturas de Celsius a Fahrenheit y viceversa. La conversi\u00f3n de temperaturas es un ejercicio pr\u00e1ctico que refuerza el uso de f\u00f3rmulas matem\u00e1ticas y toma de decisiones en programaci\u00f3n. C\u00f3mo Resolverlo # Para resolver este problema, primero pediremos al usuario que elija qu\u00e9 conversi\u00f3n desea realizar. Dependiendo de su elecci\u00f3n, realizaremos la conversi\u00f3n utilizando las f\u00f3rmulas correspondientes. Mostraremos el resultado final al usuario. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que elija entre convertir de Celsius a Fahrenheit o de Fahrenheit a Celsius. Si elige Celsius a Fahrenheit: Pedir la temperatura en Celsius. Convertirla a Fahrenheit usando la f\u00f3rmula correspondiente. Mostrar el resultado. Si elige Fahrenheit a Celsius: Pedir la temperatura en Fahrenheit. Convertirla a Celsius usando la f\u00f3rmula correspondiente. Mostrar el resultado. Si la opci\u00f3n no es v\u00e1lida, mostrar un mensaje de error. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que elija la conversi\u00f3n que desea hacer opcion = input(\"\u00bfDeseas convertir de Celsius a Fahrenheit (C) o de Fahrenheit a Celsius (F)? \").strip().upper() # Dependiendo de la opci\u00f3n, hacemos la conversi\u00f3n correspondiente if opcion == \"C\": celsius = float(input(\"Ingresa la temperatura en Celsius: \")) # Pedimos la temperatura en Celsius fahrenheit = (celsius * 9/5) + 32 # Convertimos a Fahrenheit usando la f\u00f3rmula print(f\"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit.\") # Mostramos el resultado elif opcion == \"F\": fahrenheit = float(input(\"Ingresa la temperatura en Fahrenheit: \")) # Pedimos la temperatura en Fahrenheit celsius = (fahrenheit - 32) * 5/9 # Convertimos a Celsius usando la f\u00f3rmula print(f\"{fahrenheit} grados Fahrenheit son {celsius} grados Celsius.\") # Mostramos el resultado else: print(\"Opci\u00f3n no v\u00e1lida. Por favor elige 'C' o 'F'.\") # Mensaje si la opci\u00f3n es inv\u00e1lida \u00a1Y con esto, hemos completado nuestro tercer cap\u00edtulo! Estos ejercicios avanzados te han mostrado c\u00f3mo resolver problemas m\u00e1s complejos y te han dado una idea de c\u00f3mo la programaci\u00f3n puede aplicarse a situaciones del mundo real. En el pr\u00f3ximo cap\u00edtulo, exploraremos la programaci\u00f3n creativa, donde tendr\u00e1s la oportunidad de usar todo lo que has aprendido para crear programas divertidos y originales. \u00a1Sigue adelante y no dejes de practicar!","title":"Avanzado"},{"location":"03-avanzado.html#capitulo_3_programacion_avanzada","text":"\u00a1Bienvenido al tercer cap\u00edtulo de nuestro viaje en el mundo de la programaci\u00f3n! Hasta ahora, has aprendido los conceptos b\u00e1sicos y has explorado c\u00f3mo las computadoras pueden tomar decisiones y realizar tareas repetitivas. En este cap\u00edtulo, vamos a profundizar un poco m\u00e1s en la programaci\u00f3n y enfrentarnos a desaf\u00edos m\u00e1s complejos. Este es el momento de combinar lo que has aprendido y aplicarlo a problemas que requieren un pensamiento m\u00e1s avanzado. Trabajaremos con c\u00e1lculos m\u00e1s sofisticados, como determinar el n\u00famero mayor entre tres valores, crear un juego para adivinar n\u00fameros, calcular la edad bas\u00e1ndonos en el a\u00f1o de nacimiento, y verificar si un a\u00f1o es bisiesto. Estos ejercicios no solo te ayudar\u00e1n a mejorar tus habilidades de programaci\u00f3n, sino que tambi\u00e9n te mostrar\u00e1n c\u00f3mo la programaci\u00f3n puede ser \u00fatil en situaciones pr\u00e1cticas de la vida real.","title":"Cap\u00edtulo 3: Programaci\u00f3n Avanzada"},{"location":"03-avanzado.html#31_numero_mayor","text":"","title":"3.1 N\u00famero Mayor"},{"location":"03-avanzado.html#el_reto","text":"En este ejercicio, necesitamos determinar cu\u00e1l es el n\u00famero mayor entre tres valores proporcionados por el usuario. Este tipo de problema es \u00fatil cuando se trabaja con comparaciones y decisiones basadas en condiciones.","title":"El Reto"},{"location":"03-avanzado.html#como_resolverlo","text":"Para resolver este problema, utilizaremos la funci\u00f3n max() de Python, que nos permite encontrar el valor m\u00e1ximo entre varios n\u00fameros. Pediremos al usuario que ingrese tres n\u00fameros, los compararemos y luego mostraremos el n\u00famero mayor.","title":"C\u00f3mo Resolverlo"},{"location":"03-avanzado.html#pseudocodigo","text":"Empezar el programa. Pedir al usuario que ingrese el primer n\u00famero. Pedir al usuario que ingrese el segundo n\u00famero. Pedir al usuario que ingrese el tercer n\u00famero. Comparar los tres n\u00fameros usando la funci\u00f3n max . Mostrar el n\u00famero mayor en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"03-avanzado.html#codigo","text":"# Pedimos al usuario que ingrese tres n\u00fameros num1 = float(input(\"Ingresa el primer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num2 = float(input(\"Ingresa el segundo n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal num3 = float(input(\"Ingresa el tercer n\u00famero: \")) # Convertimos la entrada a un n\u00famero decimal # Usamos la funci\u00f3n max para encontrar el n\u00famero mayor mayor = max(num1, num2, num3) # Encuentra el mayor de los tres n\u00fameros # Mostramos el n\u00famero mayor print(\"El n\u00famero mayor es:\", mayor) # Imprime el mayor n\u00famero","title":"C\u00f3digo"},{"location":"03-avanzado.html#32_adivina_el_numero","text":"","title":"3.2 Adivina el N\u00famero"},{"location":"03-avanzado.html#el_reto_1","text":"Vamos a crear un juego sencillo en el que la computadora elige un n\u00famero al azar entre 1 y 100, y el usuario tiene que adivinarlo. Despu\u00e9s de cada intento, la computadora dar\u00e1 pistas indicando si el n\u00famero es mayor o menor que el intento del usuario.","title":"El Reto"},{"location":"03-avanzado.html#como_resolverlo_1","text":"Para resolver este problema, utilizaremos la funci\u00f3n randint() de la biblioteca random para generar un n\u00famero aleatorio. Luego, usaremos un bucle while para permitir al usuario hacer intentos hasta que adivine correctamente. En cada intento, compararemos el n\u00famero ingresado por el usuario con el n\u00famero secreto y daremos una pista.","title":"C\u00f3mo Resolverlo"},{"location":"03-avanzado.html#pseudocodigo_1","text":"Empezar el programa. Generar un n\u00famero aleatorio entre 1 y 100 y guardarlo como numero_secreto . Inicializar un contador de intentos en 0. Repetir hasta que el usuario adivine el n\u00famero: Pedir al usuario que ingrese un n\u00famero. Aumentar el contador de intentos. Si el n\u00famero es menor que numero_secreto , mostrar \"Muy bajo, intenta de nuevo\". Si el n\u00famero es mayor que numero_secreto , mostrar \"Muy alto, intenta de nuevo\". Si el n\u00famero es igual a numero_secreto , mostrar \"Felicidades\" y salir del bucle. Mostrar el n\u00famero de intentos realizados. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"03-avanzado.html#codigo_1","text":"import random # Importamos la biblioteca random para generar un n\u00famero aleatorio # Generamos un n\u00famero aleatorio entre 1 y 100 numero_secreto = random.randint(1, 100) # Guardamos el n\u00famero aleatorio intentos = 0 # Inicializamos un contador de intentos # Creamos un bucle para que el usuario adivine el n\u00famero while True: intento = int(input(\"Adivina el n\u00famero (entre 1 y 100): \")) # Pedimos un n\u00famero al usuario intentos += 1 # Aumentamos el contador de intentos # Comparamos el intento con el n\u00famero secreto if intento < numero_secreto: print(\"Muy bajo, intenta de nuevo.\") # El n\u00famero es menor al secreto elif intento > numero_secreto: print(\"Muy alto, intenta de nuevo.\") # El n\u00famero es mayor al secreto else: print(f\"Felicidades, adivinaste el n\u00famero en {intentos} intentos.\") # El n\u00famero es correcto break # Salimos del bucle","title":"C\u00f3digo"},{"location":"03-avanzado.html#33_calcula_la_edad","text":"","title":"3.3 Calcula la Edad"},{"location":"03-avanzado.html#el_reto_2","text":"En este ejercicio, vamos a calcular la edad de una persona bas\u00e1ndonos en su a\u00f1o de nacimiento. Este ejercicio es \u00fatil para aprender a trabajar con fechas y operaciones aritm\u00e9ticas b\u00e1sicas.","title":"El Reto"},{"location":"03-avanzado.html#como_resolverlo_2","text":"Para resolver este problema, primero pediremos al usuario que ingrese su a\u00f1o de nacimiento. Luego, obtendremos el a\u00f1o actual utilizando la biblioteca datetime , restaremos el a\u00f1o de nacimiento del a\u00f1o actual, y as\u00ed obtendremos la edad de la persona.","title":"C\u00f3mo Resolverlo"},{"location":"03-avanzado.html#pseudocodigo_2","text":"Empezar el programa. Pedir al usuario que ingrese su a\u00f1o de nacimiento. Obtener el a\u00f1o actual utilizando la biblioteca datetime . Calcular la edad restando el a\u00f1o de nacimiento del a\u00f1o actual. Mostrar la edad en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"03-avanzado.html#codigo_2","text":"from datetime import datetime # Importamos la biblioteca datetime para manejar fechas # Pedimos al usuario que ingrese su a\u00f1o de nacimiento ano_nacimiento = int(input(\"\u00bfEn qu\u00e9 a\u00f1o naciste? \")) # Convertimos la entrada a un n\u00famero entero # Obtenemos el a\u00f1o actual usando datetime ano_actual = datetime.now().year # Obtenemos el a\u00f1o actual # Calculamos la edad restando el a\u00f1o de nacimiento al a\u00f1o actual edad = ano_actual - ano_nacimiento # Calculamos la diferencia de a\u00f1os # Mostramos la edad del usuario print(f\"Tienes {edad} a\u00f1os.\") # Imprime la edad calculada","title":"C\u00f3digo"},{"location":"03-avanzado.html#34_ano_bisiesto","text":"","title":"3.4 A\u00f1o Bisiesto"},{"location":"03-avanzado.html#el_reto_3","text":"Un a\u00f1o bisiesto es aquel que tiene un d\u00eda adicional (29 de febrero), y ocurre cada cuatro a\u00f1os, con algunas excepciones. En este ejercicio, escribiremos un programa que determine si un a\u00f1o ingresado por el usuario es bisiesto o no.","title":"El Reto"},{"location":"03-avanzado.html#como_resolverlo_3","text":"Para resolver este problema, aplicaremos las reglas de los a\u00f1os bisiestos: un a\u00f1o es bisiesto si es divisible por 4, pero no por 100, a menos que tambi\u00e9n sea divisible por 400. Usaremos estas condiciones en un bloque if-elif-else .","title":"C\u00f3mo Resolverlo"},{"location":"03-avanzado.html#pseudocodigo_3","text":"Empezar el programa. Pedir al usuario que ingrese un a\u00f1o. Verificar si el a\u00f1o es divisible por 4 y no divisible por 100, o si es divisible por 400: Si es as\u00ed, mostrar que el a\u00f1o es bisiesto. De lo contrario, mostrar que el a\u00f1o no es bisiesto. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"03-avanzado.html#codigo_3","text":"# Pedimos al usuario que ingrese un a\u00f1o ano = int(input(\"Ingresa un a\u00f1o: \")) # Convertimos la entrada a un n\u00famero entero # Verificamos si el a\u00f1o es bisiesto if (ano % 4 == 0 and ano % 100 != 0) or (ano % 400 == 0): print(f\"El a\u00f1o {ano} es bisiesto.\") # Imprime si el a\u00f1o es bisiesto else: print(f\"El a\u00f1o {ano} no es bisiesto.\") # Imprime si el a\u00f1o no es bisiesto","title":"C\u00f3digo"},{"location":"03-avanzado.html#35_conversion_de_temperaturas","text":"","title":"3.5 Conversi\u00f3n de Temperaturas"},{"location":"03-avanzado.html#el_reto_4","text":"En este ejercicio, vamos a crear un programa que convierta temperaturas de Celsius a Fahrenheit y viceversa. La conversi\u00f3n de temperaturas es un ejercicio pr\u00e1ctico que refuerza el uso de f\u00f3rmulas matem\u00e1ticas y toma de decisiones en programaci\u00f3n.","title":"El Reto"},{"location":"03-avanzado.html#como_resolverlo_4","text":"Para resolver este problema, primero pediremos al usuario que elija qu\u00e9 conversi\u00f3n desea realizar. Dependiendo de su elecci\u00f3n, realizaremos la conversi\u00f3n utilizando las f\u00f3rmulas correspondientes. Mostraremos el resultado final al usuario.","title":"C\u00f3mo Resolverlo"},{"location":"03-avanzado.html#pseudocodigo_4","text":"Empezar el programa. Pedir al usuario que elija entre convertir de Celsius a Fahrenheit o de Fahrenheit a Celsius. Si elige Celsius a Fahrenheit: Pedir la temperatura en Celsius. Convertirla a Fahrenheit usando la f\u00f3rmula correspondiente. Mostrar el resultado. Si elige Fahrenheit a Celsius: Pedir la temperatura en Fahrenheit. Convertirla a Celsius usando la f\u00f3rmula correspondiente. Mostrar el resultado. Si la opci\u00f3n no es v\u00e1lida, mostrar un mensaje de error. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"03-avanzado.html#codigo_4","text":"# Pedimos al usuario que elija la conversi\u00f3n que desea hacer opcion = input(\"\u00bfDeseas convertir de Celsius a Fahrenheit (C) o de Fahrenheit a Celsius (F)? \").strip().upper() # Dependiendo de la opci\u00f3n, hacemos la conversi\u00f3n correspondiente if opcion == \"C\": celsius = float(input(\"Ingresa la temperatura en Celsius: \")) # Pedimos la temperatura en Celsius fahrenheit = (celsius * 9/5) + 32 # Convertimos a Fahrenheit usando la f\u00f3rmula print(f\"{celsius} grados Celsius son {fahrenheit} grados Fahrenheit.\") # Mostramos el resultado elif opcion == \"F\": fahrenheit = float(input(\"Ingresa la temperatura en Fahrenheit: \")) # Pedimos la temperatura en Fahrenheit celsius = (fahrenheit - 32) * 5/9 # Convertimos a Celsius usando la f\u00f3rmula print(f\"{fahrenheit} grados Fahrenheit son {celsius} grados Celsius.\") # Mostramos el resultado else: print(\"Opci\u00f3n no v\u00e1lida. Por favor elige 'C' o 'F'.\") # Mensaje si la opci\u00f3n es inv\u00e1lida \u00a1Y con esto, hemos completado nuestro tercer cap\u00edtulo! Estos ejercicios avanzados te han mostrado c\u00f3mo resolver problemas m\u00e1s complejos y te han dado una idea de c\u00f3mo la programaci\u00f3n puede aplicarse a situaciones del mundo real. En el pr\u00f3ximo cap\u00edtulo, exploraremos la programaci\u00f3n creativa, donde tendr\u00e1s la oportunidad de usar todo lo que has aprendido para crear programas divertidos y originales. \u00a1Sigue adelante y no dejes de practicar!","title":"C\u00f3digo"},{"location":"04-creativo.html","text":"Cap\u00edtulo 4: Programaci\u00f3n Creativa # \u00a1Bienvenido al cap\u00edtulo m\u00e1s divertido de este manual! Hasta ahora, has aprendido los conceptos b\u00e1sicos, intermedios y avanzados de la programaci\u00f3n en Python. En este \u00faltimo cap\u00edtulo, vamos a liberar toda tu creatividad. La programaci\u00f3n no solo es una herramienta poderosa para resolver problemas, sino que tambi\u00e9n es una forma de arte. Aqu\u00ed, tendr\u00e1s la oportunidad de usar todo lo que has aprendido para crear programas que no solo son funcionales, sino tambi\u00e9n visualmente interesantes y divertidos de usar. Desde construir pir\u00e1mides con asteriscos hasta dise\u00f1ar patrones de diamantes, estos ejercicios te animar\u00e1n a pensar de manera creativa y a experimentar con el c\u00f3digo. \u00a1Prep\u00e1rate para jugar, explorar y dejar volar tu imaginaci\u00f3n en el mundo de la programaci\u00f3n creativa! 4.1 Crear una Pir\u00e1mide # El Reto # Nuestro primer ejercicio creativo es construir una pir\u00e1mide utilizando asteriscos ( * ). La altura de la pir\u00e1mide ser\u00e1 determinada por el usuario, y el programa imprimir\u00e1 una pir\u00e1mide con el n\u00famero de filas especificado. Este ejercicio es ideal para practicar el uso de bucles y c\u00f3mo manipular la salida en la consola. C\u00f3mo Resolverlo # Para resolver este problema, usaremos un bucle for que se ejecutar\u00e1 tantas veces como filas tenga la pir\u00e1mide. En cada iteraci\u00f3n, imprimiremos un n\u00famero creciente de asteriscos, precedidos por los espacios necesarios para centrar la pir\u00e1mide. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese el n\u00famero de filas de la pir\u00e1mide. Para cada n\u00famero desde 1 hasta el n\u00famero de filas: Calcular el n\u00famero de espacios para centrar la fila. Calcular el n\u00famero de asteriscos a imprimir. Mostrar la fila con los espacios y asteriscos correspondientes. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese el n\u00famero de filas para la pir\u00e1mide filas = int(input(\"\u00bfCu\u00e1ntas filas tendr\u00e1 la pir\u00e1mide? \")) # Convertimos la entrada a un n\u00famero entero # Usamos un bucle for para construir la pir\u00e1mide for i in range(1, filas + 1): # Iteramos desde 1 hasta el n\u00famero de filas print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos correspondientes en cada fila 4.2 Patr\u00f3n de Diamante # El Reto # En este ejercicio, vamos a crear un patr\u00f3n de diamante utilizando asteriscos. La altura del diamante ser\u00e1 determinada por el usuario. Este ejercicio es una extensi\u00f3n del ejercicio anterior y te permitir\u00e1 practicar m\u00e1s el uso de bucles y el control de la salida en la consola. C\u00f3mo Resolverlo # Para resolver este problema, dividiremos el patr\u00f3n en dos partes: la mitad superior y la mitad inferior del diamante. Utilizaremos dos bucles for : uno para construir la mitad superior y otro para la mitad inferior. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese el n\u00famero de filas para la mitad del diamante. Para la mitad superior del diamante: Para cada n\u00famero desde 1 hasta el n\u00famero de filas: Calcular el n\u00famero de espacios. Calcular el n\u00famero de asteriscos. Mostrar la fila con los espacios y asteriscos correspondientes. Para la mitad inferior del diamante: Para cada n\u00famero desde el n\u00famero de filas menos 1 hasta 1: Calcular el n\u00famero de espacios. Calcular el n\u00famero de asteriscos. Mostrar la fila con los espacios y asteriscos correspondientes. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese el n\u00famero de filas para la mitad del diamante filas = int(input(\"Ingresa el n\u00famero de filas para la mitad del diamante: \")) # Convertimos la entrada a un n\u00famero entero # Construimos la mitad superior del diamante for i in range(1, filas + 1): # Iteramos desde 1 hasta el n\u00famero de filas print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos # Construimos la mitad inferior del diamante for i in range(filas - 1, 0, -1): # Iteramos de regreso desde el n\u00famero de filas menos 1 hasta 1 print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos 4.3 N\u00famero Aleatorio dentro de un Rango # El Reto # Este ejercicio es perfecto para aquellos que quieren explorar c\u00f3mo generar n\u00fameros aleatorios en un rango espec\u00edfico. Vamos a crear un programa que genere un n\u00famero aleatorio dentro de un rango definido por el usuario. Este ejercicio es \u00fatil en muchas aplicaciones, como juegos o simulaciones. C\u00f3mo Resolverlo # Para resolver este problema, usaremos la funci\u00f3n randint() de la biblioteca random . El usuario proporcionar\u00e1 los l\u00edmites inferior y superior, y el programa generar\u00e1 un n\u00famero aleatorio dentro de esos l\u00edmites. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese el l\u00edmite inferior del rango. Pedir al usuario que ingrese el l\u00edmite superior del rango. Generar un n\u00famero aleatorio dentro del rango dado. Mostrar el n\u00famero aleatorio generado en la pantalla. Finalizar el programa. C\u00f3digo # import random # Importamos la biblioteca random para generar un n\u00famero aleatorio # Pedimos al usuario que ingrese los l\u00edmites inferior y superior del rango limite_inferior = int(input(\"Ingresa el l\u00edmite inferior del rango: \")) # Convertimos la entrada a un n\u00famero entero limite_superior = int(input(\"Ingresa el l\u00edmite superior del rango: \")) # Convertimos la entrada a un n\u00famero entero # Generamos un n\u00famero aleatorio dentro del rango dado numero_aleatorio = random.randint(limite_inferior, limite_superior) # Genera un n\u00famero aleatorio dentro del rango # Mostramos el n\u00famero aleatorio print(f\"El n\u00famero aleatorio entre {limite_inferior} y {limite_superior} es: {numero_aleatorio}\") # Imprime el n\u00famero aleatorio 4.4 Pal\u00edndromo # El Reto # Un pal\u00edndromo es una palabra o frase que se lee igual de adelante hacia atr\u00e1s. En este ejercicio, vamos a crear un programa que verifique si una palabra o frase ingresada por el usuario es un pal\u00edndromo. Este ejercicio es una excelente pr\u00e1ctica para trabajar con cadenas de texto y manipulaci\u00f3n de caracteres. C\u00f3mo Resolverlo # Para resolver este problema, eliminaremos los espacios y convertiremos la cadena a min\u00fasculas para que la verificaci\u00f3n no sea sensible a may\u00fasculas o min\u00fasculas. Luego, compararemos la cadena con su versi\u00f3n invertida. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese una palabra o frase. Eliminar los espacios de la cadena y convertirla a min\u00fasculas. Invertir la cadena. Comparar la cadena original con la cadena invertida. Si son iguales, mostrar que es un pal\u00edndromo. Si no son iguales, mostrar que no es un pal\u00edndromo. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese una palabra o frase texto = input(\"Ingresa una palabra o frase: \").replace(\" \", \"\").lower() # Eliminamos espacios y convertimos a min\u00fasculas # Verificamos si el texto es un pal\u00edndromo if texto == texto[::-1]: # Comparamos el texto con su versi\u00f3n invertida print(\"Es un pal\u00edndromo.\") # Imprime si el texto es un pal\u00edndromo else: print(\"No es un pal\u00edndromo.\") # Imprime si el texto no es un pal\u00edndromo 4.5 Dibujar un Rect\u00e1ngulo con Asteriscos # El Reto # Nuestro \u00faltimo ejercicio creativo consiste en dibujar un rect\u00e1ngulo utilizando asteriscos. La longitud y el ancho del rect\u00e1ngulo ser\u00e1n determinados por el usuario. Este ejercicio es \u00fatil para practicar la manipulaci\u00f3n de la salida en la consola y para trabajar con bucles anidados. C\u00f3mo Resolverlo # Para resolver este problema, utilizaremos un bucle for para controlar las filas del rect\u00e1ngulo y otro para imprimir los asteriscos en cada fila. El n\u00famero de asteriscos en cada fila ser\u00e1 determinado por la longitud del rect\u00e1ngulo. Pseudoc\u00f3digo # Empezar el programa. Pedir al usuario que ingrese la longitud del rect\u00e1ngulo. Pedir al usuario que ingrese el ancho del rect\u00e1ngulo. Para cada fila desde 1 hasta el ancho: Imprimir una l\u00ednea de asteriscos con la longitud dada. Finalizar el programa. C\u00f3digo # # Pedimos al usuario que ingrese la longitud y el ancho del rect\u00e1ngulo longitud = int(input(\"Ingresa la longitud del rect\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero entero ancho = int(input(\"Ingresa el ancho del rect\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero entero # Dibujamos el rect\u00e1ngulo usando un bucle for for i in range(ancho): # Iteramos tantas veces como el ancho print(\"*\" * longitud) # Imprimimos una fila de asteriscos de longitud dada \u00a1Felicidades! Has completado el cap\u00edtulo de Programaci\u00f3n Creativa y, con ello, el \u00faltimo cap\u00edtulo de este manual. Los ejercicios de este cap\u00edtulo te han permitido experimentar con patrones y generar contenido visual interesante utilizando c\u00f3digo. La programaci\u00f3n es una herramienta poderosa no solo para resolver problemas, sino tambi\u00e9n para expresar tu creatividad. Ahora que has aprendido tanto, est\u00e1s listo para seguir explorando y creando con Python. \u00a1El l\u00edmite es tu imaginaci\u00f3n!","title":"Creativo"},{"location":"04-creativo.html#capitulo_4_programacion_creativa","text":"\u00a1Bienvenido al cap\u00edtulo m\u00e1s divertido de este manual! Hasta ahora, has aprendido los conceptos b\u00e1sicos, intermedios y avanzados de la programaci\u00f3n en Python. En este \u00faltimo cap\u00edtulo, vamos a liberar toda tu creatividad. La programaci\u00f3n no solo es una herramienta poderosa para resolver problemas, sino que tambi\u00e9n es una forma de arte. Aqu\u00ed, tendr\u00e1s la oportunidad de usar todo lo que has aprendido para crear programas que no solo son funcionales, sino tambi\u00e9n visualmente interesantes y divertidos de usar. Desde construir pir\u00e1mides con asteriscos hasta dise\u00f1ar patrones de diamantes, estos ejercicios te animar\u00e1n a pensar de manera creativa y a experimentar con el c\u00f3digo. \u00a1Prep\u00e1rate para jugar, explorar y dejar volar tu imaginaci\u00f3n en el mundo de la programaci\u00f3n creativa!","title":"Cap\u00edtulo 4: Programaci\u00f3n Creativa"},{"location":"04-creativo.html#41_crear_una_piramide","text":"","title":"4.1 Crear una Pir\u00e1mide"},{"location":"04-creativo.html#el_reto","text":"Nuestro primer ejercicio creativo es construir una pir\u00e1mide utilizando asteriscos ( * ). La altura de la pir\u00e1mide ser\u00e1 determinada por el usuario, y el programa imprimir\u00e1 una pir\u00e1mide con el n\u00famero de filas especificado. Este ejercicio es ideal para practicar el uso de bucles y c\u00f3mo manipular la salida en la consola.","title":"El Reto"},{"location":"04-creativo.html#como_resolverlo","text":"Para resolver este problema, usaremos un bucle for que se ejecutar\u00e1 tantas veces como filas tenga la pir\u00e1mide. En cada iteraci\u00f3n, imprimiremos un n\u00famero creciente de asteriscos, precedidos por los espacios necesarios para centrar la pir\u00e1mide.","title":"C\u00f3mo Resolverlo"},{"location":"04-creativo.html#pseudocodigo","text":"Empezar el programa. Pedir al usuario que ingrese el n\u00famero de filas de la pir\u00e1mide. Para cada n\u00famero desde 1 hasta el n\u00famero de filas: Calcular el n\u00famero de espacios para centrar la fila. Calcular el n\u00famero de asteriscos a imprimir. Mostrar la fila con los espacios y asteriscos correspondientes. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"04-creativo.html#codigo","text":"# Pedimos al usuario que ingrese el n\u00famero de filas para la pir\u00e1mide filas = int(input(\"\u00bfCu\u00e1ntas filas tendr\u00e1 la pir\u00e1mide? \")) # Convertimos la entrada a un n\u00famero entero # Usamos un bucle for para construir la pir\u00e1mide for i in range(1, filas + 1): # Iteramos desde 1 hasta el n\u00famero de filas print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos correspondientes en cada fila","title":"C\u00f3digo"},{"location":"04-creativo.html#42_patron_de_diamante","text":"","title":"4.2 Patr\u00f3n de Diamante"},{"location":"04-creativo.html#el_reto_1","text":"En este ejercicio, vamos a crear un patr\u00f3n de diamante utilizando asteriscos. La altura del diamante ser\u00e1 determinada por el usuario. Este ejercicio es una extensi\u00f3n del ejercicio anterior y te permitir\u00e1 practicar m\u00e1s el uso de bucles y el control de la salida en la consola.","title":"El Reto"},{"location":"04-creativo.html#como_resolverlo_1","text":"Para resolver este problema, dividiremos el patr\u00f3n en dos partes: la mitad superior y la mitad inferior del diamante. Utilizaremos dos bucles for : uno para construir la mitad superior y otro para la mitad inferior.","title":"C\u00f3mo Resolverlo"},{"location":"04-creativo.html#pseudocodigo_1","text":"Empezar el programa. Pedir al usuario que ingrese el n\u00famero de filas para la mitad del diamante. Para la mitad superior del diamante: Para cada n\u00famero desde 1 hasta el n\u00famero de filas: Calcular el n\u00famero de espacios. Calcular el n\u00famero de asteriscos. Mostrar la fila con los espacios y asteriscos correspondientes. Para la mitad inferior del diamante: Para cada n\u00famero desde el n\u00famero de filas menos 1 hasta 1: Calcular el n\u00famero de espacios. Calcular el n\u00famero de asteriscos. Mostrar la fila con los espacios y asteriscos correspondientes. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"04-creativo.html#codigo_1","text":"# Pedimos al usuario que ingrese el n\u00famero de filas para la mitad del diamante filas = int(input(\"Ingresa el n\u00famero de filas para la mitad del diamante: \")) # Convertimos la entrada a un n\u00famero entero # Construimos la mitad superior del diamante for i in range(1, filas + 1): # Iteramos desde 1 hasta el n\u00famero de filas print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos # Construimos la mitad inferior del diamante for i in range(filas - 1, 0, -1): # Iteramos de regreso desde el n\u00famero de filas menos 1 hasta 1 print(\" \" * (filas - i) + \"*\" * (2 * i - 1)) # Imprime los espacios y los asteriscos","title":"C\u00f3digo"},{"location":"04-creativo.html#43_numero_aleatorio_dentro_de_un_rango","text":"","title":"4.3 N\u00famero Aleatorio dentro de un Rango"},{"location":"04-creativo.html#el_reto_2","text":"Este ejercicio es perfecto para aquellos que quieren explorar c\u00f3mo generar n\u00fameros aleatorios en un rango espec\u00edfico. Vamos a crear un programa que genere un n\u00famero aleatorio dentro de un rango definido por el usuario. Este ejercicio es \u00fatil en muchas aplicaciones, como juegos o simulaciones.","title":"El Reto"},{"location":"04-creativo.html#como_resolverlo_2","text":"Para resolver este problema, usaremos la funci\u00f3n randint() de la biblioteca random . El usuario proporcionar\u00e1 los l\u00edmites inferior y superior, y el programa generar\u00e1 un n\u00famero aleatorio dentro de esos l\u00edmites.","title":"C\u00f3mo Resolverlo"},{"location":"04-creativo.html#pseudocodigo_2","text":"Empezar el programa. Pedir al usuario que ingrese el l\u00edmite inferior del rango. Pedir al usuario que ingrese el l\u00edmite superior del rango. Generar un n\u00famero aleatorio dentro del rango dado. Mostrar el n\u00famero aleatorio generado en la pantalla. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"04-creativo.html#codigo_2","text":"import random # Importamos la biblioteca random para generar un n\u00famero aleatorio # Pedimos al usuario que ingrese los l\u00edmites inferior y superior del rango limite_inferior = int(input(\"Ingresa el l\u00edmite inferior del rango: \")) # Convertimos la entrada a un n\u00famero entero limite_superior = int(input(\"Ingresa el l\u00edmite superior del rango: \")) # Convertimos la entrada a un n\u00famero entero # Generamos un n\u00famero aleatorio dentro del rango dado numero_aleatorio = random.randint(limite_inferior, limite_superior) # Genera un n\u00famero aleatorio dentro del rango # Mostramos el n\u00famero aleatorio print(f\"El n\u00famero aleatorio entre {limite_inferior} y {limite_superior} es: {numero_aleatorio}\") # Imprime el n\u00famero aleatorio","title":"C\u00f3digo"},{"location":"04-creativo.html#44_palindromo","text":"","title":"4.4 Pal\u00edndromo"},{"location":"04-creativo.html#el_reto_3","text":"Un pal\u00edndromo es una palabra o frase que se lee igual de adelante hacia atr\u00e1s. En este ejercicio, vamos a crear un programa que verifique si una palabra o frase ingresada por el usuario es un pal\u00edndromo. Este ejercicio es una excelente pr\u00e1ctica para trabajar con cadenas de texto y manipulaci\u00f3n de caracteres.","title":"El Reto"},{"location":"04-creativo.html#como_resolverlo_3","text":"Para resolver este problema, eliminaremos los espacios y convertiremos la cadena a min\u00fasculas para que la verificaci\u00f3n no sea sensible a may\u00fasculas o min\u00fasculas. Luego, compararemos la cadena con su versi\u00f3n invertida.","title":"C\u00f3mo Resolverlo"},{"location":"04-creativo.html#pseudocodigo_3","text":"Empezar el programa. Pedir al usuario que ingrese una palabra o frase. Eliminar los espacios de la cadena y convertirla a min\u00fasculas. Invertir la cadena. Comparar la cadena original con la cadena invertida. Si son iguales, mostrar que es un pal\u00edndromo. Si no son iguales, mostrar que no es un pal\u00edndromo. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"04-creativo.html#codigo_3","text":"# Pedimos al usuario que ingrese una palabra o frase texto = input(\"Ingresa una palabra o frase: \").replace(\" \", \"\").lower() # Eliminamos espacios y convertimos a min\u00fasculas # Verificamos si el texto es un pal\u00edndromo if texto == texto[::-1]: # Comparamos el texto con su versi\u00f3n invertida print(\"Es un pal\u00edndromo.\") # Imprime si el texto es un pal\u00edndromo else: print(\"No es un pal\u00edndromo.\") # Imprime si el texto no es un pal\u00edndromo","title":"C\u00f3digo"},{"location":"04-creativo.html#45_dibujar_un_rectangulo_con_asteriscos","text":"","title":"4.5 Dibujar un Rect\u00e1ngulo con Asteriscos"},{"location":"04-creativo.html#el_reto_4","text":"Nuestro \u00faltimo ejercicio creativo consiste en dibujar un rect\u00e1ngulo utilizando asteriscos. La longitud y el ancho del rect\u00e1ngulo ser\u00e1n determinados por el usuario. Este ejercicio es \u00fatil para practicar la manipulaci\u00f3n de la salida en la consola y para trabajar con bucles anidados.","title":"El Reto"},{"location":"04-creativo.html#como_resolverlo_4","text":"Para resolver este problema, utilizaremos un bucle for para controlar las filas del rect\u00e1ngulo y otro para imprimir los asteriscos en cada fila. El n\u00famero de asteriscos en cada fila ser\u00e1 determinado por la longitud del rect\u00e1ngulo.","title":"C\u00f3mo Resolverlo"},{"location":"04-creativo.html#pseudocodigo_4","text":"Empezar el programa. Pedir al usuario que ingrese la longitud del rect\u00e1ngulo. Pedir al usuario que ingrese el ancho del rect\u00e1ngulo. Para cada fila desde 1 hasta el ancho: Imprimir una l\u00ednea de asteriscos con la longitud dada. Finalizar el programa.","title":"Pseudoc\u00f3digo"},{"location":"04-creativo.html#codigo_4","text":"# Pedimos al usuario que ingrese la longitud y el ancho del rect\u00e1ngulo longitud = int(input(\"Ingresa la longitud del rect\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero entero ancho = int(input(\"Ingresa el ancho del rect\u00e1ngulo: \")) # Convertimos la entrada a un n\u00famero entero # Dibujamos el rect\u00e1ngulo usando un bucle for for i in range(ancho): # Iteramos tantas veces como el ancho print(\"*\" * longitud) # Imprimimos una fila de asteriscos de longitud dada \u00a1Felicidades! Has completado el cap\u00edtulo de Programaci\u00f3n Creativa y, con ello, el \u00faltimo cap\u00edtulo de este manual. Los ejercicios de este cap\u00edtulo te han permitido experimentar con patrones y generar contenido visual interesante utilizando c\u00f3digo. La programaci\u00f3n es una herramienta poderosa no solo para resolver problemas, sino tambi\u00e9n para expresar tu creatividad. Ahora que has aprendido tanto, est\u00e1s listo para seguir explorando y creando con Python. \u00a1El l\u00edmite es tu imaginaci\u00f3n!","title":"C\u00f3digo"},{"location":"05-recursos.html","text":"Cap\u00edtulo 5: Recursos # \u00a1Felicidades por llegar hasta aqu\u00ed! Ahora que has completado todos los cap\u00edtulos de este manual y has aprendido los fundamentos de la programaci\u00f3n en Python, es el momento de seguir avanzando. La programaci\u00f3n es un campo vasto y emocionante, y siempre hay algo nuevo por descubrir. En este cap\u00edtulo, hemos recopilado una serie de recursos adicionales para ayudarte a continuar tu aprendizaje. Ya sea que seas un ni\u00f1o curioso que quiere explorar m\u00e1s, o un educador que busca inspirar a sus estudiantes, estos recursos te ser\u00e1n de gran ayuda. 5.1 Recursos para Ni\u00f1os que Quieren Programar # Libros y Manuales # \"Python for Kids: A Playful Introduction to Programming\" por Jason R. Briggs: Un libro excelente que introduce a los ni\u00f1os al mundo de Python con un enfoque divertido y accesible. \"Invent Your Own Computer Games with Python\" por Al Sweigart: Este libro ense\u00f1a a los ni\u00f1os c\u00f3mo crear juegos utilizando Python, lo que hace que aprender sea emocionante y relevante. Plataformas de Aprendizaje en L\u00ednea # Scratch (scratch.mit.edu): Aunque no es Python, Scratch es una plataforma visual de programaci\u00f3n que es perfecta para principiantes. Ayuda a entender los conceptos b\u00e1sicos de la programaci\u00f3n de una manera l\u00fadica y f\u00e1cil de seguir. Code.org: Ofrece cursos interactivos para ni\u00f1os de todas las edades, desde principiantes hasta avanzados. Es un gran lugar para comenzar a programar con Python y otros lenguajes. Khan Academy (khanacademy.org/computing): Ofrece cursos de introducci\u00f3n a la inform\u00e1tica y programaci\u00f3n, incluyendo ejercicios interactivos que son perfectos para principiantes. Aplicaciones y Juegos # Hopscotch: Una aplicaci\u00f3n para iPad que permite a los ni\u00f1os aprender a programar creando sus propios juegos y animaciones. Tynker: Una plataforma educativa que ense\u00f1a a los ni\u00f1os a programar a trav\u00e9s de juegos, rompecabezas y proyectos creativos. Comunidades y Concursos # CodeCombat: Un juego en l\u00ednea donde los ni\u00f1os aprenden a programar mientras avanzan a trav\u00e9s de niveles y desaf\u00edos. Google Code-in: Un concurso global para estudiantes de 13 a 17 a\u00f1os, donde pueden contribuir a proyectos de c\u00f3digo abierto y ganar premios. 5.2 Recursos para Educadores # Gu\u00edas y Manuales de Ense\u00f1anza # \"Teach Your Kids to Code\" por Bryson Payne: Un recurso excelente para padres y educadores que quieren ense\u00f1ar programaci\u00f3n a sus hijos o estudiantes utilizando Python. \"Hello World! Computer Programming for Kids and Other Beginners\" por Warren Sande y Carter Sande: Un libro que se centra en hacer la programaci\u00f3n accesible y divertida para los ni\u00f1os. Plataformas de Apoyo Educativo # CS Unplugged (csunplugged.org): Ofrece actividades gratuitas que ense\u00f1an conceptos de inform\u00e1tica sin necesidad de una computadora, lo cual es ideal para introducciones sin tecnolog\u00eda. Python for Everybody (coursera.org/specializations/python): Un curso en l\u00ednea gratuito ofrecido por Coursera y la Universidad de Michigan, que ense\u00f1a los fundamentos de Python. Es un gran recurso para educadores que quieren profundizar su conocimiento. EdX (edx.org): Ofrece cursos en l\u00ednea sobre programaci\u00f3n y ciencias de la computaci\u00f3n de universidades de todo el mundo. Muchos de estos cursos son gratuitos. Recursos de Planificaci\u00f3n y Evaluaci\u00f3n # Hour of Code (hourofcode.com): Ofrece lecciones y actividades de una hora que pueden introducir a los estudiantes a la programaci\u00f3n. Tambi\u00e9n proporciona gu\u00edas y materiales para educadores. Code Club (codeclub.org): Una red mundial de clubes de programaci\u00f3n gratuitos para ni\u00f1os, que ofrece planes de lecciones y proyectos en Python, Scratch y HTML/CSS. Conferencias y Talleres # Scratch Conference: Una conferencia anual donde educadores y entusiastas de Scratch se re\u00fanen para compartir ideas y aprender nuevas t\u00e9cnicas de ense\u00f1anza. PyCon Kids: Un evento dentro de la conferencia PyCon, dise\u00f1ado espec\u00edficamente para j\u00f3venes programadores y sus padres. Ofrece talleres y actividades para aprender Python de una manera divertida. 5.3 Comunidades en L\u00ednea # Foros y Grupos de Discusi\u00f3n # Stack Overflow (stackoverflow.com): Un foro de preguntas y respuestas donde los programadores pueden obtener ayuda sobre problemas espec\u00edficos de codificaci\u00f3n. Hay una gran comunidad de desarrolladores Python. Reddit - LearnProgramming (reddit.com/r/learnprogramming): Una comunidad en l\u00ednea donde los principiantes pueden hacer preguntas y compartir recursos sobre la programaci\u00f3n en general. Proyectos Colaborativos # GitHub (github.com): Una plataforma para alojar y compartir c\u00f3digo. Es un excelente lugar para que los estudiantes y educadores contribuyan a proyectos de c\u00f3digo abierto y aprendan de otros desarrolladores. Open Source Projects: Participar en proyectos de c\u00f3digo abierto es una excelente manera de aprender, colaborar y contribuir a la comunidad global de programaci\u00f3n. 5.4 Consejos Finales # Para Ni\u00f1os # Divi\u00e9rtete y s\u00e9 curioso: La programaci\u00f3n es una herramienta incre\u00edblemente poderosa, y la mejor manera de aprender es divirti\u00e9ndote. No tengas miedo de experimentar y probar cosas nuevas. Practica, practica y practica: Como cualquier habilidad, la programaci\u00f3n mejora con la pr\u00e1ctica. Intenta resolver problemas por tu cuenta, participa en desaf\u00edos de codificaci\u00f3n y sigue creando proyectos. Para Educadores # Fomenta la creatividad: Anima a los estudiantes a pensar fuera de la caja y a encontrar soluciones creativas a los problemas. La programaci\u00f3n es tanto un arte como una ciencia. S\u00e9 paciente y comprensivo: Los conceptos de programaci\u00f3n pueden ser dif\u00edciles de entender al principio. Es importante ser paciente y ofrecer apoyo a los estudiantes mientras aprenden. Mantente actualizado: La tecnolog\u00eda cambia r\u00e1pidamente, as\u00ed que es importante seguir aprendiendo y mantenerse al d\u00eda con las nuevas herramientas y m\u00e9todos de ense\u00f1anza. Este cap\u00edtulo de recursos es solo el comienzo de tu viaje en la programaci\u00f3n. Hay un vasto mundo de conocimientos y comunidades esperando ser explorados. Tanto si eres un ni\u00f1o que quiere seguir programando, como si eres un educador buscando nuevas formas de inspirar a tus estudiantes, espero que estos recursos te ayuden a continuar tu aventura en la programaci\u00f3n. Recuerda, la programaci\u00f3n no es solo sobre resolver problemas, sino tambi\u00e9n sobre crear, explorar y, lo m\u00e1s importante, \u00a1divertirse en el proceso! \u00a1Buena suerte y sigue programando!","title":"Recursos"},{"location":"05-recursos.html#capitulo_5_recursos","text":"\u00a1Felicidades por llegar hasta aqu\u00ed! Ahora que has completado todos los cap\u00edtulos de este manual y has aprendido los fundamentos de la programaci\u00f3n en Python, es el momento de seguir avanzando. La programaci\u00f3n es un campo vasto y emocionante, y siempre hay algo nuevo por descubrir. En este cap\u00edtulo, hemos recopilado una serie de recursos adicionales para ayudarte a continuar tu aprendizaje. Ya sea que seas un ni\u00f1o curioso que quiere explorar m\u00e1s, o un educador que busca inspirar a sus estudiantes, estos recursos te ser\u00e1n de gran ayuda.","title":"Cap\u00edtulo 5: Recursos"},{"location":"05-recursos.html#51_recursos_para_ninos_que_quieren_programar","text":"","title":"5.1 Recursos para Ni\u00f1os que Quieren Programar"},{"location":"05-recursos.html#libros_y_manuales","text":"\"Python for Kids: A Playful Introduction to Programming\" por Jason R. Briggs: Un libro excelente que introduce a los ni\u00f1os al mundo de Python con un enfoque divertido y accesible. \"Invent Your Own Computer Games with Python\" por Al Sweigart: Este libro ense\u00f1a a los ni\u00f1os c\u00f3mo crear juegos utilizando Python, lo que hace que aprender sea emocionante y relevante.","title":"Libros y Manuales"},{"location":"05-recursos.html#plataformas_de_aprendizaje_en_linea","text":"Scratch (scratch.mit.edu): Aunque no es Python, Scratch es una plataforma visual de programaci\u00f3n que es perfecta para principiantes. Ayuda a entender los conceptos b\u00e1sicos de la programaci\u00f3n de una manera l\u00fadica y f\u00e1cil de seguir. Code.org: Ofrece cursos interactivos para ni\u00f1os de todas las edades, desde principiantes hasta avanzados. Es un gran lugar para comenzar a programar con Python y otros lenguajes. Khan Academy (khanacademy.org/computing): Ofrece cursos de introducci\u00f3n a la inform\u00e1tica y programaci\u00f3n, incluyendo ejercicios interactivos que son perfectos para principiantes.","title":"Plataformas de Aprendizaje en L\u00ednea"},{"location":"05-recursos.html#aplicaciones_y_juegos","text":"Hopscotch: Una aplicaci\u00f3n para iPad que permite a los ni\u00f1os aprender a programar creando sus propios juegos y animaciones. Tynker: Una plataforma educativa que ense\u00f1a a los ni\u00f1os a programar a trav\u00e9s de juegos, rompecabezas y proyectos creativos.","title":"Aplicaciones y Juegos"},{"location":"05-recursos.html#comunidades_y_concursos","text":"CodeCombat: Un juego en l\u00ednea donde los ni\u00f1os aprenden a programar mientras avanzan a trav\u00e9s de niveles y desaf\u00edos. Google Code-in: Un concurso global para estudiantes de 13 a 17 a\u00f1os, donde pueden contribuir a proyectos de c\u00f3digo abierto y ganar premios.","title":"Comunidades y Concursos"},{"location":"05-recursos.html#52_recursos_para_educadores","text":"","title":"5.2 Recursos para Educadores"},{"location":"05-recursos.html#guias_y_manuales_de_ensenanza","text":"\"Teach Your Kids to Code\" por Bryson Payne: Un recurso excelente para padres y educadores que quieren ense\u00f1ar programaci\u00f3n a sus hijos o estudiantes utilizando Python. \"Hello World! Computer Programming for Kids and Other Beginners\" por Warren Sande y Carter Sande: Un libro que se centra en hacer la programaci\u00f3n accesible y divertida para los ni\u00f1os.","title":"Gu\u00edas y Manuales de Ense\u00f1anza"},{"location":"05-recursos.html#plataformas_de_apoyo_educativo","text":"CS Unplugged (csunplugged.org): Ofrece actividades gratuitas que ense\u00f1an conceptos de inform\u00e1tica sin necesidad de una computadora, lo cual es ideal para introducciones sin tecnolog\u00eda. Python for Everybody (coursera.org/specializations/python): Un curso en l\u00ednea gratuito ofrecido por Coursera y la Universidad de Michigan, que ense\u00f1a los fundamentos de Python. Es un gran recurso para educadores que quieren profundizar su conocimiento. EdX (edx.org): Ofrece cursos en l\u00ednea sobre programaci\u00f3n y ciencias de la computaci\u00f3n de universidades de todo el mundo. Muchos de estos cursos son gratuitos.","title":"Plataformas de Apoyo Educativo"},{"location":"05-recursos.html#recursos_de_planificacion_y_evaluacion","text":"Hour of Code (hourofcode.com): Ofrece lecciones y actividades de una hora que pueden introducir a los estudiantes a la programaci\u00f3n. Tambi\u00e9n proporciona gu\u00edas y materiales para educadores. Code Club (codeclub.org): Una red mundial de clubes de programaci\u00f3n gratuitos para ni\u00f1os, que ofrece planes de lecciones y proyectos en Python, Scratch y HTML/CSS.","title":"Recursos de Planificaci\u00f3n y Evaluaci\u00f3n"},{"location":"05-recursos.html#conferencias_y_talleres","text":"Scratch Conference: Una conferencia anual donde educadores y entusiastas de Scratch se re\u00fanen para compartir ideas y aprender nuevas t\u00e9cnicas de ense\u00f1anza. PyCon Kids: Un evento dentro de la conferencia PyCon, dise\u00f1ado espec\u00edficamente para j\u00f3venes programadores y sus padres. Ofrece talleres y actividades para aprender Python de una manera divertida.","title":"Conferencias y Talleres"},{"location":"05-recursos.html#53_comunidades_en_linea","text":"","title":"5.3 Comunidades en L\u00ednea"},{"location":"05-recursos.html#foros_y_grupos_de_discusion","text":"Stack Overflow (stackoverflow.com): Un foro de preguntas y respuestas donde los programadores pueden obtener ayuda sobre problemas espec\u00edficos de codificaci\u00f3n. Hay una gran comunidad de desarrolladores Python. Reddit - LearnProgramming (reddit.com/r/learnprogramming): Una comunidad en l\u00ednea donde los principiantes pueden hacer preguntas y compartir recursos sobre la programaci\u00f3n en general.","title":"Foros y Grupos de Discusi\u00f3n"},{"location":"05-recursos.html#proyectos_colaborativos","text":"GitHub (github.com): Una plataforma para alojar y compartir c\u00f3digo. Es un excelente lugar para que los estudiantes y educadores contribuyan a proyectos de c\u00f3digo abierto y aprendan de otros desarrolladores. Open Source Projects: Participar en proyectos de c\u00f3digo abierto es una excelente manera de aprender, colaborar y contribuir a la comunidad global de programaci\u00f3n.","title":"Proyectos Colaborativos"},{"location":"05-recursos.html#54_consejos_finales","text":"","title":"5.4 Consejos Finales"},{"location":"05-recursos.html#para_ninos","text":"Divi\u00e9rtete y s\u00e9 curioso: La programaci\u00f3n es una herramienta incre\u00edblemente poderosa, y la mejor manera de aprender es divirti\u00e9ndote. No tengas miedo de experimentar y probar cosas nuevas. Practica, practica y practica: Como cualquier habilidad, la programaci\u00f3n mejora con la pr\u00e1ctica. Intenta resolver problemas por tu cuenta, participa en desaf\u00edos de codificaci\u00f3n y sigue creando proyectos.","title":"Para Ni\u00f1os"},{"location":"05-recursos.html#para_educadores","text":"Fomenta la creatividad: Anima a los estudiantes a pensar fuera de la caja y a encontrar soluciones creativas a los problemas. La programaci\u00f3n es tanto un arte como una ciencia. S\u00e9 paciente y comprensivo: Los conceptos de programaci\u00f3n pueden ser dif\u00edciles de entender al principio. Es importante ser paciente y ofrecer apoyo a los estudiantes mientras aprenden. Mantente actualizado: La tecnolog\u00eda cambia r\u00e1pidamente, as\u00ed que es importante seguir aprendiendo y mantenerse al d\u00eda con las nuevas herramientas y m\u00e9todos de ense\u00f1anza. Este cap\u00edtulo de recursos es solo el comienzo de tu viaje en la programaci\u00f3n. Hay un vasto mundo de conocimientos y comunidades esperando ser explorados. Tanto si eres un ni\u00f1o que quiere seguir programando, como si eres un educador buscando nuevas formas de inspirar a tus estudiantes, espero que estos recursos te ayuden a continuar tu aventura en la programaci\u00f3n. Recuerda, la programaci\u00f3n no es solo sobre resolver problemas, sino tambi\u00e9n sobre crear, explorar y, lo m\u00e1s importante, \u00a1divertirse en el proceso! \u00a1Buena suerte y sigue programando!","title":"Para Educadores"}]}